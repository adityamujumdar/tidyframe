#!/bin/bash\n\n# ================================================================================\n# TidyFrame Secure Environment Setup Script\n# ================================================================================\n# \n# This script helps set up secure environment configurations for TidyFrame.\n# It generates secure secrets, validates configuration, and provides guidance.\n# \n# Usage:\n#   ./setup_secure_env.sh [environment]\n# \n# Where environment is: development, staging, or production\n# \n# ================================================================================\n\nset -euo pipefail\n\n# Colors for output\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nNC='\\033[0m' # No Color\n\n# Configuration\nSCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"\nPROJECT_ROOT=\"$(dirname \"$(dirname \"$SCRIPT_DIR\")\")\" \nENVIRONMENT=\"${1:-development}\"\nENV_FILE=\"$PROJECT_ROOT/.env.$ENVIRONMENT\"\n\n# Helper functions\nlog_info() {\n    echo -e \"${BLUE}‚ÑπÔ∏è  $1${NC}\"\n}\n\nlog_success() {\n    echo -e \"${GREEN}‚úÖ $1${NC}\"\n}\n\nlog_warning() {\n    echo -e \"${YELLOW}‚ö†Ô∏è  $1${NC}\"\n}\n\nlog_error() {\n    echo -e \"${RED}‚ùå $1${NC}\"\n}\n\ngenerate_secret() {\n    local length=${1:-48}\n    python3 -c \"import secrets; print(secrets.token_urlsafe($length))\"\n}\n\ngenerate_db_password() {\n    local length=${1:-24}\n    python3 -c \"import secrets, string; print(''.join(secrets.choice(string.ascii_letters + string.digits) for _ in range($length)))\"\n}\n\nvalidate_environment() {\n    if [[ ! \"$ENVIRONMENT\" =~ ^(development|staging|production)$ ]]; then\n        log_error \"Invalid environment: $ENVIRONMENT\"\n        log_info \"Valid environments: development, staging, production\"\n        exit 1\n    fi\n}\n\ncheck_dependencies() {\n    local missing_deps=()\n    \n    if ! command -v python3 &> /dev/null; then\n        missing_deps+=(\"python3\")\n    fi\n    \n    if ! python3 -c \"import secrets\" 2>/dev/null; then\n        missing_deps+=(\"python3-secrets\")\n    fi\n    \n    if [ ${#missing_deps[@]} -ne 0 ]; then\n        log_error \"Missing dependencies: ${missing_deps[*]}\"\n        log_info \"Please install missing dependencies and try again\"\n        exit 1\n    fi\n}\n\nbackup_existing_env() {\n    if [[ -f \"$ENV_FILE\" ]]; then\n        local backup_file=\"${ENV_FILE}.backup.$(date +%Y%m%d_%H%M%S)\"\n        cp \"$ENV_FILE\" \"$backup_file\"\n        log_info \"Backed up existing environment file to: $backup_file\"\n    fi\n}\n\ngenerate_secrets() {\n    log_info \"Generating secure secrets for $ENVIRONMENT environment...\"\n    \n    # Generate core secrets\n    JWT_SECRET=$(generate_secret 48)\n    JWT_REFRESH_SECRET=$(generate_secret 48)\n    FLASK_SECRET=$(generate_secret 48)\n    \n    # Generate database passwords\n    DB_PASSWORD=$(generate_db_password 24)\n    REDIS_PASSWORD=$(generate_db_password 24)\n    \n    # Generate additional security tokens\n    ENCRYPTION_KEY=$(generate_secret 32)\n    API_SIGNING_SECRET=$(generate_secret 32)\n    WEBHOOK_SECRET=$(generate_secret 32)\n    \n    log_success \"Generated all secrets\"\n}\n\ngenerate_site_password_hash() {\n    if [[ \"$ENVIRONMENT\" == \"production\" ]]; then\n        log_warning \"For production, you should set a custom site password\"\n        read -p \"Enter site password (or press Enter to generate one): \" site_password\n        \n        if [[ -z \"$site_password\" ]]; then\n            site_password=$(python3 -c \"import secrets, string; chars = string.ascii_letters + string.digits + '!@#$%^&*'; print(''.join(secrets.choice(chars) for _ in range(20)))\")\n            log_info \"Generated site password: $site_password\"\n        fi\n    else\n        site_password=\"DEV_SITE_PASSWORD_$(date +%Y%m%d)\"\n    fi\n    \n    # Generate bcrypt hash\n    SITE_PASSWORD_HASH=$(python3 -c \"\nimport bcrypt, base64\npassword = '$site_password'.encode('utf-8')\nhashed = bcrypt.hashpw(password, bcrypt.gensalt(12))\nprint(base64.b64encode(hashed).decode('utf-8'))\n\")\n    \n    log_success \"Generated site password hash\"\n}\n\ncreate_env_file() {\n    local template_file=\"$SCRIPT_DIR/.env.$ENVIRONMENT\"\n    \n    if [[ ! -f \"$template_file\" ]]; then\n        log_error \"Template file not found: $template_file\"\n        exit 1\n    fi\n    \n    log_info \"Creating environment file from template...\"\n    \n    # Copy template and substitute secrets\n    cp \"$template_file\" \"$ENV_FILE\"\n    \n    # Replace placeholders with generated secrets\n    case \"$ENVIRONMENT\" in\n        \"production\")\n            sed -i.bak \\\n                -e \"s/REPLACE_WITH_48_BYTE_SECRET/$JWT_SECRET/g\" \\\n                -e \"s/vQN5arq4Jnqwu26OyzQmIUP0MhLLXbdebnjKQibmF9sEecYoSSSbgUla9uhOynBD/$JWT_SECRET/\" \\\n                -e \"s/6DJEaUQLT6OoUAYdavUeeyV3xPxDbUbIHKvmX6d0W79cvZm1_VQ6ZVBMx-ciFZ8z/$JWT_REFRESH_SECRET/\" \\\n                -e \"s/-R5UohLgyfa43MINrR1xNiNlFjbIyR0bBuqM0LH73aNvpCPUsCOx6HvafOxk43OX/$FLASK_SECRET/\" \\\n                -e \"s/8T8L1Tvo9AMD2qv9qv44LZ4o4HwAkwl/$DB_PASSWORD/\" \\\n                -e \"s/MtDhm5lpDxWv9B05V02IXsUqzUGVLn7/$REDIS_PASSWORD/\" \\\n                -e \"s/JDJiJDEyJG81L21ic0ZPMWtUbk9oU1VrRXZ4SnVWb1VjMUYwbGlWZmFGeklYdVRNZ2xyRUlKL2Y4T0RT/$SITE_PASSWORD_HASH/\" \\\n                -e \"s/hdiP0H9FXIr_LqzguHC1L03VZNUUNe8QHliiV0711P0/$ENCRYPTION_KEY/\" \\\n                -e \"s/eBv5UqR7Hd2MUGtn_M5lVqbq5E641V5SBc7_Hp3i15k/$API_SIGNING_SECRET/\" \\\n                -e \"s/mdS_mQX7pOAqzBE3aHgpk-CHMJNan-QbwFfkrcvlwUg/$WEBHOOK_SECRET/\" \\\n                \"$ENV_FILE\"\n            ;;\n        \"staging\")\n            sed -i.bak \\\n                -e \"s/STAGING_REPLACE_WITH_48_BYTE_SECRET/$JWT_SECRET/g\" \\\n                -e \"s/STAGING_REPLACE_WITH_STRONG_PASSWORD/$DB_PASSWORD/g\" \\\n                -e \"s/STAGING_REPLACE_WITH_REDIS_PASSWORD/$REDIS_PASSWORD/g\" \\\n                -e \"s/STAGING_REPLACE_WITH_BCRYPT_HASH/$SITE_PASSWORD_HASH/g\" \\\n                -e \"s/STAGING_REPLACE_WITH_32_BYTE_ENCRYPTION_KEY/$ENCRYPTION_KEY/g\" \\\n                -e \"s/STAGING_REPLACE_WITH_32_BYTE_SIGNING_SECRET/$API_SIGNING_SECRET/g\" \\\n                -e \"s/STAGING_REPLACE_WITH_32_BYTE_WEBHOOK_SECRET/$WEBHOOK_SECRET/g\" \\\n                \"$ENV_FILE\"\n            ;;\n        \"development\")\n            # Development uses fixed secrets for easier development\n            log_info \"Using development-friendly secrets\"\n            ;;\n    esac\n    \n    # Remove backup file\n    rm -f \"${ENV_FILE}.bak\"\n    \n    log_success \"Created environment file: $ENV_FILE\"\n}\n\nvalidate_env_file() {\n    log_info \"Validating environment configuration...\"\n    \n    if command -v python3 &> /dev/null && [[ -f \"$SCRIPT_DIR/env_validator.py\" ]]; then\n        if python3 \"$SCRIPT_DIR/env_validator.py\" --env \"$ENVIRONMENT\"; then\n            log_success \"Environment validation passed\"\n        else\n            log_warning \"Environment validation found issues - please review\"\n        fi\n    else\n        log_warning \"Environment validator not available - skipping validation\"\n    fi\n}\n\nshow_next_steps() {\n    echo\n    log_success \"Environment setup complete!\"\n    echo\n    log_info \"Next steps:\"\n    echo \"  1. Review the generated environment file: $ENV_FILE\"\n    echo \"  2. Update placeholder API keys with actual values\"\n    echo \"  3. Customize domain and URL settings for your deployment\"\n    \n    if [[ \"$ENVIRONMENT\" == \"production\" ]]; then\n        echo \"  4. Store secrets in a secure secrets manager\"\n        echo \"  5. Review the deployment checklist: config/security/DEPLOYMENT_CHECKLIST.md\"\n        echo \"  6. Run security validation before deployment\"\n        \n        if [[ -n \"${site_password:-}\" ]]; then\n            echo\n            log_warning \"IMPORTANT: Site password for production: $site_password\"\n            log_warning \"Save this password securely - it's needed to access the site!\"\n        fi\n    fi\n    \n    echo\n    log_info \"Helpful commands:\"\n    echo \"  # Validate environment:\"\n    echo \"  python3 config/security/env_validator.py --env $ENVIRONMENT\"\n    echo \"  \"\n    echo \"  # Generate additional secrets:\"\n    echo \"  python3 -c \\\"import secrets; print(secrets.token_urlsafe(48))\\\"\"\n    echo \"  \"\n    echo \"  # Hash a password:\"\n    echo \"  python3 config/security/password_hasher.py hash\"\n    echo\n}\n\nshow_security_warnings() {\n    echo\n    log_warning \"SECURITY REMINDERS:\"\n    echo \"  üîê Never commit .env files to version control\"\n    echo \"  üîÑ Rotate secrets every 90 days\"\n    echo \"  üìù Use a secrets manager for production\"\n    echo \"  üîç Run security validation before deployment\"\n    echo \"  üìã Follow the deployment checklist\"\n    echo\n}\n\n# Main execution\nmain() {\n    echo \"================================================================================\" \n    echo \"üîê TidyFrame Secure Environment Setup\"\n    echo \"================================================================================\"\n    echo \"Environment: $ENVIRONMENT\"\n    echo \"Target file: $ENV_FILE\"\n    echo\n    \n    # Validation and preparation\n    validate_environment\n    check_dependencies\n    \n    # Check if environment file already exists\n    if [[ -f \"$ENV_FILE\" ]]; then\n        log_warning \"Environment file already exists: $ENV_FILE\"\n        read -p \"Do you want to overwrite it? (y/N): \" overwrite\n        if [[ ! \"$overwrite\" =~ ^[Yy]$ ]]; then\n            log_info \"Aborted by user\"\n            exit 0\n        fi\n        backup_existing_env\n    fi\n    \n    # Generate secrets and create file\n    generate_secrets\n    generate_site_password_hash\n    create_env_file\n    \n    # Validate the created file\n    validate_env_file\n    \n    # Show next steps\n    show_next_steps\n    show_security_warnings\n    \n    log_success \"Setup complete! üéâ\"\n}\n\n# Run main function if script is executed directly\nif [[ \"${BASH_SOURCE[0]}\" == \"${0}\" ]]; then\n    main \"$@\"\nfi"