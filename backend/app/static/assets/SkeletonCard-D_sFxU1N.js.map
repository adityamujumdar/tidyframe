{"version":3,"file":"SkeletonCard-D_sFxU1N.js","sources":["../../src/components/shared/EmptyState.tsx","../../src/components/shared/SkeletonCard.tsx"],"sourcesContent":["import * as React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button } from '@/components/ui/button';\r\nimport { cn } from '@/lib/utils';\r\nimport { LucideIcon } from 'lucide-react';\r\n\r\nexport interface EmptyStateProps {\r\n  /** Icon to display (Lucide icon component) */\r\n  icon?: LucideIcon;\r\n  /** Illustration image URL or React element (optional, overrides icon) */\r\n  illustration?: string | React.ReactNode;\r\n  /** Primary title text */\r\n  title: string;\r\n  /** Supporting description text */\r\n  description?: string;\r\n  /** Call-to-action button label */\r\n  actionLabel?: string;\r\n  /** Call-to-action button click handler */\r\n  onAction?: () => void;\r\n  /** CTA button variant */\r\n  actionVariant?: 'default' | 'secondary' | 'outline' | 'ghost';\r\n  /** Secondary action button label */\r\n  secondaryActionLabel?: string;\r\n  /** Secondary action button click handler */\r\n  onSecondaryAction?: () => void;\r\n  /** Help link text */\r\n  helpLink?: {\r\n    label: string;\r\n    href: string;\r\n  };\r\n  /** Enable fade-in animation */\r\n  animate?: boolean;\r\n  /** Size variant */\r\n  size?: 'sm' | 'md' | 'lg';\r\n  /** Additional className */\r\n  className?: string;\r\n  /** Children for custom content */\r\n  children?: React.ReactNode;\r\n  /** Show subtle branding watermark at bottom */\r\n  showBranding?: boolean;\r\n}\r\n\r\n/**\r\n * EmptyState component for consistent empty state patterns\r\n *\r\n * Features:\r\n * - Optional icon or illustration display\r\n * - Title and description with typography\r\n * - Primary and secondary CTA buttons\r\n * - Help links for documentation\r\n * - Fade-in animation for smooth appearance\r\n * - Size variants for different contexts\r\n * - Semantic HTML with proper ARIA labels\r\n *\r\n * @example\r\n * ```tsx\r\n * // Simple empty state with icon\r\n * <EmptyState\r\n *   icon={FileText}\r\n *   title=\"No files yet\"\r\n *   description=\"Upload your first file to get started\"\r\n *   animate\r\n * />\r\n *\r\n * // With illustration and dual CTAs\r\n * <EmptyState\r\n *   illustration=\"/images/empty-state.svg\"\r\n *   title=\"No processing jobs\"\r\n *   description=\"Upload a file to start processing names\"\r\n *   actionLabel=\"Upload File\"\r\n *   onAction={() => navigate('/upload')}\r\n *   secondaryActionLabel=\"View Tutorial\"\r\n *   onSecondaryAction={() => navigate('/help')}\r\n *   helpLink={{ label: \"Learn more about processing\", href: \"/docs\" }}\r\n *   size=\"lg\"\r\n *   animate\r\n * />\r\n *\r\n * // With custom React illustration\r\n * <EmptyState\r\n *   illustration={<CustomIllustration />}\r\n *   title=\"Empty inbox\"\r\n *   description=\"All caught up!\"\r\n * />\r\n * ```\r\n */\r\nexport const EmptyState = React.forwardRef<HTMLDivElement, EmptyStateProps>(\r\n  (\r\n    {\r\n      icon: Icon,\r\n      illustration,\r\n      title,\r\n      description,\r\n      actionLabel,\r\n      onAction,\r\n      actionVariant = 'default',\r\n      secondaryActionLabel,\r\n      onSecondaryAction,\r\n      helpLink,\r\n      animate = false,\r\n      size = 'md',\r\n      className,\r\n      children,\r\n      showBranding = false,\r\n    },\r\n    ref\r\n  ) => {\r\n    // Size-based styling\r\n    const sizeClasses = {\r\n      sm: {\r\n        container: 'p-6',\r\n        icon: 'h-10 w-10 mb-3',\r\n        illustration: 'h-32 w-32 mb-4',\r\n        title: 'text-base font-semibold',\r\n        description: 'text-sm',\r\n      },\r\n      md: {\r\n        container: 'p-12',\r\n        icon: 'h-12 w-12 mb-4',\r\n        illustration: 'h-40 w-40 mb-6',\r\n        title: 'text-xl font-semibold',\r\n        description: 'text-base',\r\n      },\r\n      lg: {\r\n        container: 'p-16',\r\n        icon: 'h-16 w-16 mb-6',\r\n        illustration: 'h-48 w-48 mb-8',\r\n        title: 'text-2xl font-semibold',\r\n        description: 'text-base',\r\n      },\r\n    };\r\n\r\n    const classes = sizeClasses[size];\r\n\r\n    return (\r\n      <div\r\n        ref={ref}\r\n        className={cn(\r\n          'text-center',\r\n          classes.container,\r\n          animate && 'animate-in fade-in duration-500',\r\n          className\r\n        )}\r\n        role=\"status\"\r\n        aria-label={`Empty state: ${title}`}\r\n      >\r\n        {/* Illustration (if provided, overrides icon) */}\r\n        {illustration && (\r\n          <div className={cn(classes.illustration, 'mx-auto')}>\r\n            {typeof illustration === 'string' ? (\r\n              <img\r\n                src={illustration}\r\n                alt=\"\"\r\n                className=\"w-full h-full object-contain\"\r\n                aria-hidden=\"true\"\r\n              />\r\n            ) : (\r\n              illustration\r\n            )}\r\n          </div>\r\n        )}\r\n\r\n        {/* Icon (only if no illustration) */}\r\n        {!illustration && Icon && (\r\n          <Icon\r\n            className={cn(classes.icon, 'text-muted-foreground mx-auto')}\r\n            aria-hidden=\"true\"\r\n          />\r\n        )}\r\n\r\n        <h3 className={cn(classes.title, 'mb-2')}>{title}</h3>\r\n\r\n        {description && (\r\n          <p className={cn(classes.description, 'text-muted-foreground mb-4')}>\r\n            {description}\r\n          </p>\r\n        )}\r\n\r\n        {children}\r\n\r\n        {/* Action buttons */}\r\n        {(actionLabel || secondaryActionLabel) && (\r\n          <div className=\"flex items-center justify-center gap-2 mt-4\">\r\n            {actionLabel && onAction && (\r\n              <Button\r\n                onClick={onAction}\r\n                variant={actionVariant}\r\n                aria-label={actionLabel}\r\n              >\r\n                {actionLabel}\r\n              </Button>\r\n            )}\r\n            {secondaryActionLabel && onSecondaryAction && (\r\n              <Button\r\n                onClick={onSecondaryAction}\r\n                variant=\"outline\"\r\n                aria-label={secondaryActionLabel}\r\n              >\r\n                {secondaryActionLabel}\r\n              </Button>\r\n            )}\r\n          </div>\r\n        )}\r\n\r\n        {/* Help link */}\r\n        {helpLink && (\r\n          <a\r\n            href={helpLink.href}\r\n            className=\"inline-block mt-4 text-sm text-primary hover:underline\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            {helpLink.label}\r\n          </a>\r\n        )}\r\n\r\n        {/* Subtle branding watermark */}\r\n        {showBranding && (\r\n          <div className=\"mt-8 opacity-30\">\r\n            <Link to=\"/\">\r\n              <img\r\n                src=\"/logo-with-name.png\"\r\n                alt=\"TidyFrame\"\r\n                className=\"h-12 mx-auto\"\r\n              />\r\n            </Link>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nEmptyState.displayName = 'EmptyState';\r\n","import * as React from 'react';\r\nimport { Card, CardContent, CardHeader } from '@/components/ui/card';\r\nimport { cn } from '@/lib/utils';\r\n\r\nexport interface SkeletonCardProps {\r\n  /** Skeleton variant based on content type */\r\n  variant?: 'metric' | 'table' | 'card' | 'list';\r\n  /** Number of rows for table/list variants */\r\n  rows?: number;\r\n  /** Show header skeleton */\r\n  showHeader?: boolean;\r\n  /** Enable shimmer animation (left-to-right gradient sweep) */\r\n  shimmer?: boolean;\r\n  /** Enable stagger loading (progressive delay between items) */\r\n  stagger?: boolean;\r\n  /** Additional className */\r\n  className?: string;\r\n}\r\n\r\n/**\r\n * Skeleton loading placeholder component for consistent loading states\r\n *\r\n * Variants:\r\n * - metric: For stat/metric cards (used in dashboards)\r\n * - table: For data tables with rows\r\n * - card: For content cards with title and body\r\n * - list: For list items\r\n *\r\n * Features:\r\n * - Shimmer animation: Left-to-right gradient sweep for polished loading effect\r\n * - Stagger loading: Progressive delay between items for smooth appearance\r\n * - Pulse fallback: Standard pulse animation when shimmer is disabled\r\n *\r\n * @example\r\n * ```tsx\r\n * // Metric skeleton (dashboard stats)\r\n * <SkeletonCard variant=\"metric\" shimmer />\r\n *\r\n * // Table skeleton with shimmer and stagger\r\n * <SkeletonCard variant=\"table\" rows={5} showHeader shimmer stagger />\r\n *\r\n * // Card skeleton (job cards)\r\n * <SkeletonCard variant=\"card\" showHeader shimmer />\r\n *\r\n * // List with progressive loading\r\n * <SkeletonCard variant=\"list\" rows={4} shimmer stagger />\r\n * ```\r\n */\r\nexport const SkeletonCard = React.forwardRef<HTMLDivElement, SkeletonCardProps>(\r\n  ({ variant = 'card', rows = 3, showHeader = false, shimmer = false, stagger = false, className }, ref) => {\r\n    // Base skeleton animation class - shimmer or pulse\r\n    const skeletonClass = cn(\r\n      'rounded',\r\n      shimmer ? 'animate-shimmer' : 'animate-pulse bg-muted'\r\n    );\r\n\r\n    // Metric variant - compact stats display\r\n    if (variant === 'metric') {\r\n      return (\r\n        <Card ref={ref} className={cn('animate-pulse', className)}>\r\n          <CardHeader className=\"pb-2\">\r\n            <div className={cn(skeletonClass, 'h-4 w-24')} />\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className={cn(skeletonClass, 'h-8 w-16 mb-2')} />\r\n            <div className={cn(skeletonClass, 'h-3 w-20')} />\r\n          </CardContent>\r\n        </Card>\r\n      );\r\n    }\r\n\r\n    // Table variant - data table with multiple rows\r\n    if (variant === 'table') {\r\n      return (\r\n        <Card ref={ref} className={className}>\r\n          {showHeader && (\r\n            <CardHeader>\r\n              <div className={cn(skeletonClass, 'h-6 w-1/3 mb-2')} />\r\n              <div className={cn(skeletonClass, 'h-4 w-1/2')} />\r\n            </CardHeader>\r\n          )}\r\n          <CardContent className={cn('space-y-3', showHeader ? '' : 'pt-6')}>\r\n            {[...Array(rows)].map((_, i) => (\r\n              <div\r\n                key={i}\r\n                className=\"space-y-2\"\r\n                style={stagger ? { animationDelay: `${i * 75}ms` } : undefined}\r\n              >\r\n                <div className=\"flex gap-4\">\r\n                  <div className={cn(skeletonClass, 'h-4 flex-1')} />\r\n                  <div className={cn(skeletonClass, 'h-4 w-24')} />\r\n                  <div className={cn(skeletonClass, 'h-4 w-16')} />\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </CardContent>\r\n        </Card>\r\n      );\r\n    }\r\n\r\n    // List variant - simple list items\r\n    if (variant === 'list') {\r\n      return (\r\n        <div ref={ref} className={cn('space-y-3', className)}>\r\n          {[...Array(rows)].map((_, i) => (\r\n            <div\r\n              key={i}\r\n              className={cn(\r\n                'flex items-center gap-4 p-4 rounded-lg border',\r\n                skeletonClass\r\n              )}\r\n              style={stagger ? { animationDelay: `${i * 75}ms` } : undefined}\r\n            >\r\n              <div className={cn(skeletonClass, 'h-10 w-10 rounded-full')} />\r\n              <div className=\"flex-1 space-y-2\">\r\n                <div className={cn(skeletonClass, 'h-4 w-1/3')} />\r\n                <div className={cn(skeletonClass, 'h-3 w-1/2')} />\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      );\r\n    }\r\n\r\n    // Card variant (default) - content card with title and body\r\n    return (\r\n      <Card ref={ref} className={className}>\r\n        {showHeader && (\r\n          <CardHeader>\r\n            <div className={cn(skeletonClass, 'h-6 w-1/3 mb-2')} />\r\n            <div className={cn(skeletonClass, 'h-4 w-1/2')} />\r\n          </CardHeader>\r\n        )}\r\n        <CardContent className={cn('space-y-4', showHeader ? '' : 'p-6')}>\r\n          <div className={cn(skeletonClass, 'h-4 w-full')} />\r\n          <div className={cn(skeletonClass, 'h-4 w-5/6')} />\r\n          <div className={cn(skeletonClass, 'h-4 w-4/6')} />\r\n          {rows > 3 && (\r\n            <>\r\n              <div className={cn(skeletonClass, 'h-4 w-full')} />\r\n              <div className={cn(skeletonClass, 'h-4 w-3/4')} />\r\n            </>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n);\r\n\r\nSkeletonCard.displayName = 'SkeletonCard';\r\n\r\n/**\r\n * Grid of skeleton metric cards (for dashboard stats)\r\n *\r\n * @example\r\n * ```tsx\r\n * <SkeletonMetricGrid count={4} />\r\n * ```\r\n */\r\nexport const SkeletonMetricGrid: React.FC<{ count?: number; className?: string }> = ({\r\n  count = 4,\r\n  className,\r\n}) => {\r\n  return (\r\n    <div className={cn('grid gap-4 md:grid-cols-2 lg:grid-cols-4', className)}>\r\n      {[...Array(count)].map((_, i) => (\r\n        <SkeletonCard key={i} variant=\"metric\" />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nSkeletonMetricGrid.displayName = 'SkeletonMetricGrid';\r\n"],"names":["EmptyState","React.forwardRef","Icon","illustration","title","description","actionLabel","onAction","actionVariant","secondaryActionLabel","onSecondaryAction","helpLink","animate","size","className","children","showBranding","ref","classes","jsxs","cn","jsx","Button","Link","SkeletonCard","variant","rows","showHeader","shimmer","stagger","skeletonClass","Card","CardHeader","CardContent","_","Fragment"],"mappings":"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"}