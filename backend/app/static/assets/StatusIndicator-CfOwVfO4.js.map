{"version":3,"file":"StatusIndicator-CfOwVfO4.js","sources":["../../src/components/shared/StatusIndicator.tsx"],"sourcesContent":["import * as React from 'react';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { cn } from '@/lib/utils';\r\nimport {\r\n  getStatusColor,\r\n  getStatusIcon,\r\n  getStatusBadgeVariant,\r\n  getStatusLabel,\r\n  type JobStatus\r\n} from '@/utils/status';\r\n\r\nexport interface StatusIndicatorProps {\r\n  /** Job status */\r\n  status: JobStatus;\r\n  /** Display mode */\r\n  mode?: 'icon' | 'badge' | 'both';\r\n  /** Icon size */\r\n  iconSize?: 'sm' | 'md' | 'lg';\r\n  /** Show label text next to icon */\r\n  showLabel?: boolean;\r\n  /** Animate processing state */\r\n  animate?: boolean;\r\n  /** Additional CSS classes */\r\n  className?: string;\r\n  /** Custom aria-label for accessibility */\r\n  ariaLabel?: string;\r\n}\r\n\r\n/**\r\n * StatusIndicator - Unified component for displaying job status\r\n *\r\n * Replaces duplicated status icon and badge logic across components.\r\n * Provides consistent status visualization with accessibility.\r\n *\r\n * @example\r\n * ```tsx\r\n * <StatusIndicator status=\"processing\" mode=\"both\" animate />\r\n * <StatusIndicator status=\"completed\" mode=\"icon\" showLabel />\r\n * <StatusIndicator status=\"failed\" mode=\"badge\" />\r\n * ```\r\n */\r\nexport const StatusIndicator = React.forwardRef<HTMLDivElement, StatusIndicatorProps>(\r\n  (\r\n    {\r\n      status,\r\n      mode = 'icon',\r\n      iconSize = 'md',\r\n      showLabel = false,\r\n      animate = false,\r\n      className,\r\n      ariaLabel,\r\n      ...props\r\n    },\r\n    ref\r\n  ) => {\r\n    const Icon = getStatusIcon(status);\r\n    const colorClass = getStatusColor(status);\r\n    const badgeVariant = getStatusBadgeVariant(status);\r\n    const label = getStatusLabel(status);\r\n\r\n    const iconSizeClasses = {\r\n      sm: 'h-4 w-4',\r\n      md: 'h-5 w-5',\r\n      lg: 'h-6 w-6'\r\n    };\r\n\r\n    // Apply animation only to processing status if animate is true\r\n    const shouldAnimate = animate && status === 'processing';\r\n\r\n    // Generate aria-label if not provided\r\n    const accessibleLabel = ariaLabel || `Status: ${label}`;\r\n\r\n    const renderIcon = () => (\r\n      <Icon\r\n        className={cn(\r\n          iconSizeClasses[iconSize],\r\n          colorClass,\r\n          shouldAnimate && 'animate-pulse'\r\n        )}\r\n        aria-hidden={!showLabel} // Hide from screen readers if label is shown\r\n      />\r\n    );\r\n\r\n    const renderBadge = () => (\r\n      <Badge variant={badgeVariant} aria-label={accessibleLabel}>\r\n        {label}\r\n      </Badge>\r\n    );\r\n\r\n    if (mode === 'badge') {\r\n      return (\r\n        <div ref={ref} className={className} {...props}>\r\n          {renderBadge()}\r\n        </div>\r\n      );\r\n    }\r\n\r\n    if (mode === 'both') {\r\n      return (\r\n        <div\r\n          ref={ref}\r\n          className={cn('flex items-center gap-2', className)}\r\n          role=\"status\"\r\n          aria-label={accessibleLabel}\r\n          {...props}\r\n        >\r\n          {renderIcon()}\r\n          {renderBadge()}\r\n        </div>\r\n      );\r\n    }\r\n\r\n    // mode === 'icon' (default)\r\n    return (\r\n      <div\r\n        ref={ref}\r\n        className={cn('flex items-center gap-2', className)}\r\n        role=\"status\"\r\n        aria-label={accessibleLabel}\r\n        {...props}\r\n      >\r\n        {renderIcon()}\r\n        {showLabel && (\r\n          <span className={cn('text-sm font-medium', colorClass)}>\r\n            {label}\r\n          </span>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nStatusIndicator.displayName = 'StatusIndicator';\r\n"],"names":["StatusIndicator","React.forwardRef","status","mode","iconSize","showLabel","animate","className","ariaLabel","props","ref","Icon","getStatusIcon","colorClass","getStatusColor","badgeVariant","getStatusBadgeVariant","label","getStatusLabel","iconSizeClasses","shouldAnimate","accessibleLabel","renderIcon","jsx","cn","renderBadge","Badge","jsxs"],"mappings":"2LAyCO,MAAMA,EAAkBC,EAAAA,WAC7B,CACE,CACE,OAAAC,EACA,KAAAC,EAAO,OACP,SAAAC,EAAW,KACX,UAAAC,EAAY,GACZ,QAAAC,EAAU,GACV,UAAAC,EACA,UAAAC,EACA,GAAGC,CAAA,EAELC,IACG,CACH,MAAMC,EAAOC,EAAcV,CAAM,EAC3BW,EAAaC,EAAeZ,CAAM,EAClCa,EAAeC,EAAsBd,CAAM,EAC3Ce,EAAQC,EAAehB,CAAM,EAE7BiB,EAAkB,CACtB,GAAI,UACJ,GAAI,UACJ,GAAI,SAAA,EAIAC,EAAgBd,GAAWJ,IAAW,aAGtCmB,EAAkBb,GAAa,WAAWS,CAAK,GAE/CK,EAAa,IACjBC,EAAAA,IAACZ,EAAA,CACC,UAAWa,EACTL,EAAgBf,CAAQ,EACxBS,EACAO,GAAiB,eAAA,EAEnB,cAAa,CAACf,CAAA,CAAA,EAIZoB,EAAc,IAClBF,MAACG,EAAA,CAAM,QAASX,EAAc,aAAYM,EACvC,SAAAJ,CAAA,CACH,EAGF,OAAId,IAAS,cAER,MAAA,CAAI,IAAAO,EAAU,UAAAH,EAAuB,GAAGE,EACtC,aACH,EAIAN,IAAS,OAETwB,EAAAA,KAAC,MAAA,CACC,IAAAjB,EACA,UAAWc,EAAG,0BAA2BjB,CAAS,EAClD,KAAK,SACL,aAAYc,EACX,GAAGZ,EAEH,SAAA,CAAAa,EAAA,EACAG,EAAA,CAAY,CAAA,CAAA,EAOjBE,EAAAA,KAAC,MAAA,CACC,IAAAjB,EACA,UAAWc,EAAG,0BAA2BjB,CAAS,EAClD,KAAK,SACL,aAAYc,EACX,GAAGZ,EAEH,SAAA,CAAAa,EAAA,EACAjB,SACE,OAAA,CAAK,UAAWmB,EAAG,sBAAuBX,CAAU,EAClD,SAAAI,CAAA,CACH,CAAA,CAAA,CAAA,CAIR,CACF,EAEAjB,EAAgB,YAAc"}