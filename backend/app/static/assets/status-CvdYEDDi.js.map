{"version":3,"file":"status-CvdYEDDi.js","sources":["../../src/utils/status.ts"],"sourcesContent":["/**\r\n * Status utilities for consistent status handling across the app\r\n * Single source of truth for status colors, icons, and labels\r\n */\r\n\r\nimport {\r\n  CheckCircle,\r\n  AlertCircle,\r\n  Activity,\r\n  Clock,\r\n  AlertTriangle,\r\n  XCircle,\r\n  Info,\r\n  type LucideIcon\r\n} from 'lucide-react';\r\n\r\nexport type JobStatus = 'pending' | 'processing' | 'completed' | 'failed';\r\nexport type QualityLevel = 'excellent' | 'good' | 'fair' | 'poor';\r\nexport type StatusVariant = 'success' | 'warning' | 'error' | 'info' | 'processing' | 'default';\r\n\r\n/**\r\n * Gets the appropriate color class for a job status\r\n * @param status Job status\r\n * @returns Tailwind color class\r\n */\r\nexport function getStatusColor(status: JobStatus): string {\r\n  switch (status) {\r\n    case 'completed':\r\n      return 'text-status-success';\r\n    case 'failed':\r\n      return 'text-status-error';\r\n    case 'processing':\r\n      return 'text-status-processing';\r\n    case 'pending':\r\n    default:\r\n      return 'text-status-warning';\r\n  }\r\n}\r\n\r\n/**\r\n * Gets the appropriate icon for a job status\r\n * @param status Job status\r\n * @param className Optional className for the icon\r\n * @returns Lucide icon component\r\n */\r\nexport function getStatusIcon(status: JobStatus, className?: string): LucideIcon {\r\n  switch (status) {\r\n    case 'completed':\r\n      return CheckCircle;\r\n    case 'failed':\r\n      return AlertCircle;\r\n    case 'processing':\r\n      return Activity;\r\n    case 'pending':\r\n    default:\r\n      return Clock;\r\n  }\r\n}\r\n\r\n/**\r\n * Gets the appropriate badge variant for a job status\r\n * @param status Job status\r\n * @returns Badge variant\r\n */\r\nexport function getStatusBadgeVariant(status: JobStatus): \"default\" | \"destructive\" | \"secondary\" | \"outline\" {\r\n  switch (status) {\r\n    case 'completed':\r\n      return 'default';\r\n    case 'failed':\r\n      return 'destructive';\r\n    case 'processing':\r\n      return 'secondary';\r\n    case 'pending':\r\n    default:\r\n      return 'outline';\r\n  }\r\n}\r\n\r\n/**\r\n * Gets human-readable label for a job status\r\n * @param status Job status\r\n * @returns Status label\r\n */\r\nexport function getStatusLabel(status: JobStatus): string {\r\n  switch (status) {\r\n    case 'completed':\r\n      return 'Completed';\r\n    case 'failed':\r\n      return 'Failed';\r\n    case 'processing':\r\n      return 'Processing';\r\n    case 'pending':\r\n      return 'Pending';\r\n    default:\r\n      return 'Unknown';\r\n  }\r\n}\r\n\r\n/**\r\n * Gets the appropriate color class for a quality score\r\n * @param score Quality score (0-100)\r\n * @returns Tailwind color class\r\n */\r\nexport function getQualityScoreColor(score: number): string {\r\n  if (score >= 85) return 'text-status-success';\r\n  if (score >= 70) return 'text-status-warning';\r\n  return 'text-status-error';\r\n}\r\n\r\n/**\r\n * Gets the appropriate icon for a quality score\r\n * @param score Quality score (0-100)\r\n * @returns Lucide icon component\r\n */\r\nexport function getQualityScoreIcon(score: number): LucideIcon {\r\n  if (score >= 85) return CheckCircle;\r\n  if (score >= 70) return AlertTriangle;\r\n  return AlertCircle;\r\n}\r\n\r\n/**\r\n * Gets the appropriate label for a quality score\r\n * @param score Quality score (0-100)\r\n * @returns Quality label\r\n */\r\nexport function getQualityScoreLabel(score: number): string {\r\n  if (score >= 85) return 'Excellent';\r\n  if (score >= 70) return 'Good';\r\n  if (score >= 60) return 'Fair';\r\n  return 'Needs Review';\r\n}\r\n\r\n/**\r\n * Gets the appropriate badge variant for a quality score\r\n * @param score Quality score (0-100)\r\n * @returns Badge variant\r\n */\r\nexport function getQualityScoreBadgeVariant(score: number): \"default\" | \"destructive\" | \"secondary\" {\r\n  if (score >= 85) return 'default';\r\n  if (score >= 70) return 'secondary';\r\n  return 'destructive';\r\n}\r\n\r\n/**\r\n * Determines the status variant based on value\r\n * @param value Numeric value\r\n * @param thresholds Object with success and warning thresholds\r\n * @returns Status variant\r\n */\r\nexport function getStatusVariant(\r\n  value: number,\r\n  thresholds: { success: number; warning: number }\r\n): StatusVariant {\r\n  if (value >= thresholds.success) return 'success';\r\n  if (value >= thresholds.warning) return 'warning';\r\n  return 'error';\r\n}\r\n\r\n/**\r\n * Gets background color class for a status variant\r\n * @param variant Status variant\r\n * @returns Tailwind background color class\r\n */\r\nexport function getStatusBackgroundColor(variant: StatusVariant): string {\r\n  switch (variant) {\r\n    case 'success':\r\n      return 'bg-status-success-bg border-status-success-border';\r\n    case 'warning':\r\n      return 'bg-status-warning-bg border-status-warning-border';\r\n    case 'error':\r\n      return 'bg-status-error-bg border-status-error-border';\r\n    case 'info':\r\n      return 'bg-status-info-bg border-status-info-border';\r\n    case 'processing':\r\n      return 'bg-status-processing-bg border-status-processing-border';\r\n    default:\r\n      return 'bg-muted border-border';\r\n  }\r\n}\r\n\r\n/**\r\n * Gets text color class for a status variant\r\n * @param variant Status variant\r\n * @returns Tailwind text color class\r\n */\r\nexport function getStatusTextColor(variant: StatusVariant): string {\r\n  switch (variant) {\r\n    case 'success':\r\n      return 'text-status-success';\r\n    case 'warning':\r\n      return 'text-status-warning';\r\n    case 'error':\r\n      return 'text-status-error';\r\n    case 'info':\r\n      return 'text-status-info';\r\n    case 'processing':\r\n      return 'text-status-processing';\r\n    default:\r\n      return 'text-foreground';\r\n  }\r\n}\r\n\r\n/**\r\n * Gets icon for a status variant\r\n * @param variant Status variant\r\n * @returns Lucide icon component\r\n */\r\nexport function getStatusVariantIcon(variant: StatusVariant): LucideIcon {\r\n  switch (variant) {\r\n    case 'success':\r\n      return CheckCircle;\r\n    case 'warning':\r\n      return AlertTriangle;\r\n    case 'error':\r\n      return XCircle;\r\n    case 'info':\r\n      return Info;\r\n    case 'processing':\r\n      return Activity;\r\n    default:\r\n      return Info;\r\n  }\r\n}\r\n\r\n/**\r\n * Checks if a status is in a terminal state (completed/failed)\r\n * @param status Job status\r\n * @returns True if terminal state\r\n */\r\nexport function isTerminalStatus(status: JobStatus): boolean {\r\n  return status === 'completed' || status === 'failed';\r\n}\r\n\r\n/**\r\n * Checks if a status is in an active state (pending/processing)\r\n * @param status Job status\r\n * @returns True if active state\r\n */\r\nexport function isActiveStatus(status: JobStatus): boolean {\r\n  return status === 'pending' || status === 'processing';\r\n}\r\n"],"names":["getStatusColor","status","getStatusIcon","className","CheckCircle","AlertCircle","Activity","Clock","getStatusBadgeVariant","getStatusLabel","getQualityScoreColor","score","getQualityScoreIcon","AlertTriangle","getQualityScoreLabel","getQualityScoreBadgeVariant","getStatusBackgroundColor","variant","getStatusTextColor"],"mappings":"iJAyBO,SAASA,EAAeC,EAA2B,CACxD,OAAQA,EAAA,CACN,IAAK,YACH,MAAO,sBACT,IAAK,SACH,MAAO,oBACT,IAAK,aACH,MAAO,yBACT,IAAK,UACL,QACE,MAAO,qBAAA,CAEb,CAQO,SAASC,EAAcD,EAAmBE,EAAgC,CAC/E,OAAQF,EAAA,CACN,IAAK,YACH,OAAOG,EACT,IAAK,SACH,OAAOC,EACT,IAAK,aACH,OAAOC,EACT,IAAK,UACL,QACE,OAAOC,CAAA,CAEb,CAOO,SAASC,EAAsBP,EAAwE,CAC5G,OAAQA,EAAA,CACN,IAAK,YACH,MAAO,UACT,IAAK,SACH,MAAO,cACT,IAAK,aACH,MAAO,YACT,IAAK,UACL,QACE,MAAO,SAAA,CAEb,CAOO,SAASQ,EAAeR,EAA2B,CACxD,OAAQA,EAAA,CACN,IAAK,YACH,MAAO,YACT,IAAK,SACH,MAAO,SACT,IAAK,aACH,MAAO,aACT,IAAK,UACH,MAAO,UACT,QACE,MAAO,SAAA,CAEb,CAOO,SAASS,EAAqBC,EAAuB,CAC1D,OAAIA,GAAS,GAAW,sBACpBA,GAAS,GAAW,sBACjB,mBACT,CAOO,SAASC,EAAoBD,EAA2B,CAC7D,OAAIA,GAAS,GAAWP,EACpBO,GAAS,GAAWE,EACjBR,CACT,CAOO,SAASS,EAAqBH,EAAuB,CAC1D,OAAIA,GAAS,GAAW,YACpBA,GAAS,GAAW,OACpBA,GAAS,GAAW,OACjB,cACT,CAOO,SAASI,EAA4BJ,EAAwD,CAClG,OAAIA,GAAS,GAAW,UACpBA,GAAS,GAAW,YACjB,aACT,CAsBO,SAASK,EAAyBC,EAAgC,CACvE,OAAQA,EAAA,CACN,IAAK,UACH,MAAO,oDACT,IAAK,UACH,MAAO,oDACT,IAAK,QACH,MAAO,gDACT,IAAK,OACH,MAAO,8CACT,IAAK,aACH,MAAO,0DACT,QACE,MAAO,wBAAA,CAEb,CAOO,SAASC,EAAmBD,EAAgC,CACjE,OAAQA,EAAA,CACN,IAAK,UACH,MAAO,sBACT,IAAK,UACH,MAAO,sBACT,IAAK,QACH,MAAO,oBACT,IAAK,OACH,MAAO,mBACT,IAAK,aACH,MAAO,yBACT,QACE,MAAO,iBAAA,CAEb"}