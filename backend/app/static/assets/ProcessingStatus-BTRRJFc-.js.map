{"version":3,"file":"ProcessingStatus-BTRRJFc-.js","sources":["../../node_modules/lucide-react/dist/esm/icons/scale.js","../../src/utils/calculations.ts","../../src/pages/dashboard/ProcessingStatus.tsx"],"sourcesContent":["/**\n * @license lucide-react v0.542.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst __iconNode = [\n  [\"path\", { d: \"m16 16 3-8 3 8c-.87.65-1.92 1-3 1s-2.13-.35-3-1Z\", key: \"7g6ntu\" }],\n  [\"path\", { d: \"m2 16 3-8 3 8c-.87.65-1.92 1-3 1s-2.13-.35-3-1Z\", key: \"ijws7r\" }],\n  [\"path\", { d: \"M7 21h10\", key: \"1b0cd5\" }],\n  [\"path\", { d: \"M12 3v18\", key: \"108xh3\" }],\n  [\"path\", { d: \"M3 7h2c2 0 5-1 7-2 2 1 5 2 7 2h2\", key: \"3gwbw2\" }]\n];\nconst Scale = createLucideIcon(\"scale\", __iconNode);\n\nexport { __iconNode, Scale as default };\n//# sourceMappingURL=scale.js.map\n","/**\r\n * Calculation utilities for data processing\r\n * Single source of truth for mathematical operations\r\n */\r\n\r\n/**\r\n * Calculates percentage with safety checks\r\n * @param numerator The part\r\n * @param denominator The whole\r\n * @param decimals Number of decimal places (default: 0)\r\n * @returns Percentage value (0-100), clamped to valid range\r\n */\r\nexport function calculatePercentage(\r\n  numerator: number | null | undefined,\r\n  denominator: number | null | undefined,\r\n  decimals: number = 0\r\n): number {\r\n  // Handle null/undefined\r\n  if (numerator === null || numerator === undefined) numerator = 0;\r\n  if (denominator === null || denominator === undefined) denominator = 0;\r\n\r\n  // Prevent division by zero\r\n  if (denominator === 0) return 0;\r\n\r\n  // Calculate and clamp to 0-100 range\r\n  const percentage = (numerator / denominator) * 100;\r\n  return clamp(round(percentage, decimals), 0, 100);\r\n}\r\n\r\n/**\r\n * Clamps a value between min and max\r\n * @param value Value to clamp\r\n * @param min Minimum value\r\n * @param max Maximum value\r\n * @returns Clamped value\r\n */\r\nexport function clamp(value: number, min: number, max: number): number {\r\n  return Math.min(Math.max(value, min), max);\r\n}\r\n\r\n/**\r\n * Rounds a number to specified decimal places\r\n * @param value Number to round\r\n * @param decimals Number of decimal places\r\n * @returns Rounded number\r\n */\r\nexport function round(value: number, decimals: number = 0): number {\r\n  const multiplier = Math.pow(10, decimals);\r\n  return Math.round(value * multiplier) / multiplier;\r\n}\r\n\r\n/**\r\n * Calculates average from an array of numbers\r\n * @param values Array of numbers\r\n * @returns Average value or 0 if array is empty\r\n */\r\nexport function average(values: number[]): number {\r\n  if (!values || values.length === 0) return 0;\r\n  const sum = values.reduce((acc, val) => acc + val, 0);\r\n  return sum / values.length;\r\n}\r\n\r\n/**\r\n * Calculates median from an array of numbers\r\n * @param values Array of numbers\r\n * @returns Median value or 0 if array is empty\r\n */\r\nexport function median(values: number[]): number {\r\n  if (!values || values.length === 0) return 0;\r\n\r\n  const sorted = [...values].sort((a, b) => a - b);\r\n  const mid = Math.floor(sorted.length / 2);\r\n\r\n  return sorted.length % 2 === 0\r\n    ? (sorted[mid - 1] + sorted[mid]) / 2\r\n    : sorted[mid];\r\n}\r\n\r\n/**\r\n * Calculates success rate from counts\r\n * @param successCount Number of successes\r\n * @param totalCount Total attempts\r\n * @returns Success rate as decimal (0-1)\r\n */\r\nexport function calculateSuccessRate(\r\n  successCount: number | null | undefined,\r\n  totalCount: number | null | undefined\r\n): number {\r\n  if (successCount === null || successCount === undefined) successCount = 0;\r\n  if (totalCount === null || totalCount === undefined || totalCount === 0) return 0;\r\n\r\n  return clamp(successCount / totalCount, 0, 1);\r\n}\r\n\r\n/**\r\n * Calculates estimated time remaining\r\n * @param processedCount Items processed so far\r\n * @param totalCount Total items to process\r\n * @param elapsedMs Elapsed time in milliseconds\r\n * @returns Estimated remaining milliseconds\r\n */\r\nexport function calculateETA(\r\n  processedCount: number,\r\n  totalCount: number,\r\n  elapsedMs: number\r\n): number {\r\n  if (processedCount === 0 || totalCount === 0 || elapsedMs === 0) {\r\n    return 0;\r\n  }\r\n\r\n  const remainingCount = totalCount - processedCount;\r\n  const avgTimePerItem = elapsedMs / processedCount;\r\n  return Math.max(0, remainingCount * avgTimePerItem);\r\n}\r\n\r\n/**\r\n * Interpolates between two values\r\n * @param start Starting value\r\n * @param end Ending value\r\n * @param factor Interpolation factor (0-1)\r\n * @returns Interpolated value\r\n */\r\nexport function lerp(start: number, end: number, factor: number): number {\r\n  return start + (end - start) * clamp(factor, 0, 1);\r\n}\r\n\r\n/**\r\n * Maps a value from one range to another\r\n * @param value Input value\r\n * @param inMin Input range minimum\r\n * @param inMax Input range maximum\r\n * @param outMin Output range minimum\r\n * @param outMax Output range maximum\r\n * @returns Mapped value\r\n */\r\nexport function mapRange(\r\n  value: number,\r\n  inMin: number,\r\n  inMax: number,\r\n  outMin: number,\r\n  outMax: number\r\n): number {\r\n  return ((value - inMin) * (outMax - outMin)) / (inMax - inMin) + outMin;\r\n}\r\n\r\n/**\r\n * Determines quality score category\r\n * @param score Quality score (0-100)\r\n * @returns Category: 'excellent' | 'good' | 'fair' | 'poor'\r\n */\r\nexport function getQualityCategory(score: number): 'excellent' | 'good' | 'fair' | 'poor' {\r\n  if (score >= 90) return 'excellent';\r\n  if (score >= 75) return 'good';\r\n  if (score >= 60) return 'fair';\r\n  return 'poor';\r\n}\r\n\r\n/**\r\n * Calculates change between two values\r\n * @param current Current value\r\n * @param previous Previous value\r\n * @returns Change amount\r\n */\r\nexport function calculateChange(current: number, previous: number): number {\r\n  return current - previous;\r\n}\r\n\r\n/**\r\n * Calculates percentage change between two values\r\n * @param current Current value\r\n * @param previous Previous value\r\n * @returns Percentage change (can be negative)\r\n */\r\nexport function calculatePercentageChange(current: number, previous: number): number {\r\n  if (previous === 0) return current === 0 ? 0 : 100;\r\n  return ((current - previous) / previous) * 100;\r\n}\r\n","import { useState, useEffect, useCallback, useRef } from 'react';\r\nimport { useSearchParams, Link } from 'react-router-dom';\r\nimport { processingService } from '@/services/processingService';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Alert, AlertDescription } from '@/components/ui/alert';\r\nimport {\r\n  Download,\r\n  FileText,\r\n  Trash2,\r\n  RefreshCw,\r\n  AlertCircle,\r\n  Brain,\r\n  Zap,\r\n  CheckCircle,\r\n  Users,\r\n  Building2,\r\n  Scale\r\n} from 'lucide-react';\r\nimport { ProcessingJob } from '@/types/processing';\r\nimport { toast } from 'sonner';\r\nimport CountdownTimer from '@/components/CountdownTimer';\r\nimport { StatusIndicator } from '@/components/shared/StatusIndicator';\r\nimport { MetricCard } from '@/components/shared/MetricCard';\r\nimport { ProgressBar } from '@/components/shared/ProgressBar';\r\nimport { formatDateTime, formatEstimate } from '@/utils/format';\r\nimport { calculatePercentage } from '@/utils/calculations';\r\n\r\nexport default function ProcessingStatus() {\r\n  const [searchParams] = useSearchParams();\r\n  const [jobs, setJobs] = useState<ProcessingJob[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [refreshing, setRefreshing] = useState(false);\r\n  const intervalRef = useRef<NodeJS.Timeout | null>(null);\r\n  \r\n  const jobId = searchParams.get('jobId');\r\n\r\n  const fetchJobs = useCallback(async (silent = false) => {\r\n    if (!silent) setLoading(true);\r\n    setRefreshing(!silent);\r\n    \r\n    try {\r\n      const fetchedJobs = await processingService.getJobs();\r\n      setJobs(fetchedJobs);\r\n      \r\n      // If we have a specific job ID, scroll to it\r\n      if (jobId && !silent) {\r\n        setTimeout(() => {\r\n          const element = document.getElementById(`job-${jobId}`);\r\n          if (element) {\r\n            element.scrollIntoView({ behavior: 'smooth' });\r\n          }\r\n        }, 100);\r\n      }\r\n    } catch {\r\n      toast.error('Failed to fetch job status');\r\n    } finally {\r\n      setLoading(false);\r\n      setRefreshing(false);\r\n    }\r\n  }, [jobId]);\r\n\r\n  // Initial fetch and polling setup\r\n  useEffect(() => {\r\n    // Initial fetch\r\n    fetchJobs();\r\n\r\n    // Set up polling that checks job status\r\n    const pollInterval = setInterval(async () => {\r\n      try {\r\n        const currentJobs = await processingService.getJobs();\r\n        setJobs(currentJobs);\r\n        \r\n        // Only continue polling if there are active jobs\r\n        const hasActiveJobs = currentJobs.some(job => \r\n          job.status === 'processing' || job.status === 'pending'\r\n        );\r\n        \r\n        if (!hasActiveJobs && intervalRef.current) {\r\n          clearInterval(intervalRef.current);\r\n          intervalRef.current = null;\r\n        }\r\n      } catch {\r\n        // Silent fail for polling\r\n      }\r\n    }, 3000);\r\n\r\n    intervalRef.current = pollInterval;\r\n\r\n    // Cleanup on unmount\r\n    return () => {\r\n      if (intervalRef.current) {\r\n        clearInterval(intervalRef.current);\r\n      }\r\n    };\r\n  }, []); // Empty dependency array - only run once on mount\r\n\r\n  const handleDownload = async (job: ProcessingJob) => {\r\n    try {\r\n      const blob = await processingService.downloadResults(job.id);\r\n      const url = window.URL.createObjectURL(blob);\r\n      const a = document.createElement('a');\r\n      a.style.display = 'none';\r\n      a.href = url;\r\n      a.download = `processed_${job.filename}`;\r\n      document.body.appendChild(a);\r\n      a.click();\r\n      window.URL.revokeObjectURL(url);\r\n      document.body.removeChild(a);\r\n      toast.success('File downloaded successfully');\r\n    } catch {\r\n      toast.error('Failed to download file');\r\n    }\r\n  };\r\n\r\n  const handleDeleteJob = async (job: ProcessingJob) => {\r\n    try {\r\n      await processingService.deleteJob(job.id);\r\n      setJobs(jobs.filter(j => j.id !== job.id));\r\n      toast.success('Job deleted successfully');\r\n    } catch {\r\n      toast.error('Failed to delete job');\r\n    }\r\n  };\r\n\r\n  // Utility function for ETA calculation\r\n  const getEstimatedTime = (job: ProcessingJob): string => {\r\n    if (job.status !== 'processing') return '';\r\n\r\n    const elapsed = Date.now() - new Date(job.createdAt).getTime();\r\n    const estimatedTotal = (job.totalRows || 1000) * 50; // ~50ms per row estimate\r\n    const remaining = Math.max(0, estimatedTotal - elapsed);\r\n\r\n    return formatEstimate(remaining);\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"space-y-6\">\r\n        <div className=\"flex items-center justify-between\">\r\n          <h1 className=\"text-3xl font-bold tracking-tight\">Processing Status</h1>\r\n        </div>\r\n        <div className=\"space-y-4\">\r\n          {[...Array(3)].map((_, i) => (\r\n            <Card key={i} className=\"animate-pulse\">\r\n              <CardContent className=\"p-6\">\r\n                <div className=\"space-y-4\">\r\n                  <div className=\"h-4 bg-muted rounded w-1/3\"></div>\r\n                  <div className=\"h-6 bg-muted rounded w-full\"></div>\r\n                  <div className=\"h-2 bg-muted rounded w-full\"></div>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      <div className=\"flex items-center justify-between\">\r\n        <div>\r\n          <h1 className=\"text-3xl font-bold tracking-tight\">Processing Status</h1>\r\n          <p className=\"text-muted-foreground\">\r\n            Monitor your file processing jobs and download results. All files are automatically deleted after 10 minutes.\r\n          </p>\r\n        </div>\r\n        <Button \r\n          onClick={() => fetchJobs()}\r\n          disabled={refreshing}\r\n          variant=\"outline\"\r\n          size=\"sm\"\r\n        >\r\n          <RefreshCw className={`h-4 w-4 mr-2 ${refreshing ? 'animate-spin' : ''}`} />\r\n          Refresh\r\n        </Button>\r\n      </div>\r\n\r\n      {jobs.length === 0 ? (\r\n        <Card>\r\n          <CardContent className=\"p-12 text-center\">\r\n            <FileText className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\r\n            <h3 className=\"text-xl font-semibold mb-2\">No processing jobs</h3>\r\n            <p className=\"text-muted-foreground mb-4\">\r\n              Upload your first file to start processing names with AI\r\n            </p>\r\n            <Link to=\"/dashboard/upload\">\r\n              <Button>Upload File</Button>\r\n            </Link>\r\n          </CardContent>\r\n        </Card>\r\n      ) : (\r\n        <div className=\"space-y-4\">\r\n          {jobs.map((job) => (\r\n            <Card\r\n              key={job.id}\r\n              id={`job-${job.id}`}\r\n              className={jobId === job.id ? 'ring-2 ring-primary' : ''}\r\n              role=\"article\"\r\n              aria-label={`Processing job for ${job.filename}, ${job.status}, ${job.progress}% complete`}\r\n            >\r\n              <CardHeader>\r\n                <div className=\"flex items-center justify-between\">\r\n                  <div className=\"flex items-center gap-4\">\r\n                    <StatusIndicator\r\n                      status={job.status as any}\r\n                      mode=\"icon\"\r\n                      iconSize=\"lg\"\r\n                      animate\r\n                    />\r\n                    <div>\r\n                      <CardTitle className=\"text-xl\">{job.filename}</CardTitle>\r\n                      <CardDescription>\r\n                        Uploaded {formatDateTime(job.createdAt)}\r\n                        {job.completedAt && job.status === 'completed' && (\r\n                          <span> • Completed {formatDateTime(job.completedAt)}</span>\r\n                        )}\r\n                      </CardDescription>\r\n                    </div>\r\n                  </div>\r\n                  <StatusIndicator\r\n                    status={job.status as any}\r\n                    mode=\"badge\"\r\n                  />\r\n                </div>\r\n                \r\n                {/* File Expiration Countdown - shows for all jobs */}\r\n                {(job.expiresAt || job.expires_at) && (\r\n                  <div className=\"mt-4\">\r\n                    <CountdownTimer \r\n                      expiresAt={job.expiresAt || job.expires_at || null}\r\n                      className=\"w-full\"\r\n                      showIcon={true}\r\n                      warningThreshold={2}\r\n                    />\r\n                  </div>\r\n                )}\r\n              </CardHeader>\r\n\r\n              <CardContent className=\"space-y-4\">\r\n                {/* Progress Bar with ETA */}\r\n                <ProgressBar\r\n                  value={job.progress}\r\n                  max={100}\r\n                  showLabel\r\n                  label={`Progress: ${job.progress}%${job.status === 'processing' ? ` • ${getEstimatedTime(job)}` : ''}`}\r\n                  animated={job.status === 'processing'}\r\n                  dangerZone={95}\r\n                />\r\n\r\n                {/* Job Details */}\r\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\r\n                  <div>\r\n                    <p className=\"text-muted-foreground\">Rows</p>\r\n                    <p className=\"font-medium\">{job.totalRows ? job.totalRows.toLocaleString() : (job.processedRows ? job.processedRows.toLocaleString() : 'Processing...')}</p>\r\n                  </div>\r\n                  <div>\r\n                    <p className=\"text-muted-foreground\">Success Rate</p>\r\n                    <p className=\"font-medium\">\r\n                      {job.status === 'completed' && (job.successRate !== undefined || (job.totalRows && job.successfulParses !== undefined))\r\n                        ? `${job.successRate !== undefined ? Math.round(job.successRate) : Math.round((job.successfulParses || 0) / (job.totalRows || 1) * 100)}%`\r\n                        : '-'}\r\n                    </p>\r\n                  </div>\r\n                  <div>\r\n                    <p className=\"text-muted-foreground\">Processed</p>\r\n                    <p className=\"font-medium\">\r\n                      {job.processedRows ? job.processedRows.toLocaleString() : '-'}\r\n                    </p>\r\n                  </div>\r\n                  <div>\r\n                    <p className=\"text-muted-foreground\">Job ID</p>\r\n                    <p className=\"font-mono text-caption\">{job.id.slice(0, 8)}...</p>\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Analytics Section for Completed Jobs */}\r\n                {job.status === 'completed' && job.analytics && (\r\n                  <div className=\"border-t pt-4 mt-4\">\r\n                    <h4 className=\"font-semibold mb-4\">Entity Type Analytics</h4>\r\n                    <div className=\"grid grid-cols-2 md:grid-cols-5 gap-4\">\r\n                      <MetricCard\r\n                        value={job.analytics.entity_stats?.person_count || 0}\r\n                        label=\"People\"\r\n                        variant=\"info\"\r\n                        icon={Users}\r\n                      />\r\n                      <MetricCard\r\n                        value={job.analytics.entity_stats?.company_count || 0}\r\n                        label=\"Companies\"\r\n                        variant=\"success\"\r\n                        icon={Building2}\r\n                      />\r\n                      <MetricCard\r\n                        value={job.analytics.entity_stats?.trust_count || 0}\r\n                        label=\"Trusts\"\r\n                        variant=\"default\"\r\n                        icon={Scale}\r\n                      />\r\n                      <MetricCard\r\n                        value={job.analytics.entity_stats?.unknown_count || 0}\r\n                        label=\"Unknown\"\r\n                        variant=\"warning\"\r\n                      />\r\n                      <MetricCard\r\n                        value={job.analytics.entity_stats?.error_count || 0}\r\n                        label=\"Errors\"\r\n                        variant=\"error\"\r\n                      />\r\n                    </div>\r\n                    \r\n                    {/* Quality & Method Analytics */}\r\n                    <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mt-4\">\r\n                      <MetricCard\r\n                        value={`${calculatePercentage(job.geminiSuccessCount, job.totalRows)}%`}\r\n                        label=\"AI Success\"\r\n                        variant=\"info\"\r\n                        icon={Brain}\r\n                        formatValue={false}\r\n                      />\r\n                      <MetricCard\r\n                        value={`${calculatePercentage(job.fallbackUsageCount, job.totalRows)}%`}\r\n                        label=\"Fallback Used\"\r\n                        variant=\"warning\"\r\n                        icon={Zap}\r\n                        formatValue={false}\r\n                      />\r\n                      <MetricCard\r\n                        value={job.analytics.high_confidence_count || 0}\r\n                        label=\"High Quality\"\r\n                        variant=\"success\"\r\n                        icon={CheckCircle}\r\n                      />\r\n                      <MetricCard\r\n                        value={job.analytics.avg_confidence\r\n                          ? Math.round(job.analytics.avg_confidence * 100)\r\n                          : 0}\r\n                        label=\"Quality Score\"\r\n                        variant=\"info\"\r\n                      />\r\n                    </div>\r\n                    \r\n                    {/* Warning for high fallback usage */}\r\n                    {job.analytics.low_confidence_count && job.totalRows && \r\n                     (job.analytics.low_confidence_count / job.totalRows) > 0.3 && (\r\n                      <Alert className=\"mt-4\" variant=\"default\">\r\n                        <AlertCircle className=\"h-4 w-4\" />\r\n                        <AlertDescription>\r\n                          High fallback usage detected ({Math.round((job.analytics.low_confidence_count / job.totalRows) * 100)}%). \r\n                          Consider checking the detailed results for quality concerns.\r\n                        </AlertDescription>\r\n                      </Alert>\r\n                    )}\r\n                  </div>\r\n                )}\r\n\r\n                {/* Error Message */}\r\n                {job.status === 'failed' && job.errorMessage && (\r\n                  <Alert variant=\"destructive\">\r\n                    <AlertCircle className=\"h-4 w-4\" />\r\n                    <AlertDescription>{job.errorMessage}</AlertDescription>\r\n                  </Alert>\r\n                )}\r\n\r\n                {/* Actions */}\r\n                <div className=\"flex gap-2\">\r\n                  {job.status === 'completed' && (\r\n                    <Button onClick={() => handleDownload(job)} variant=\"success\" size=\"default\">\r\n                      <Download className=\"h-4 w-4 mr-2\" />\r\n                      Download Results\r\n                    </Button>\r\n                  )}\r\n                  \r\n                  {job.status === 'completed' && (\r\n                    <Link to={`/dashboard/results?jobId=${job.id}`}>\r\n                      <Button variant=\"secondary\" className=\"border border-primary-200 hover:border-primary-400\">\r\n                        <FileText className=\"h-4 w-4 mr-2\" />\r\n                        View Results\r\n                      </Button>\r\n                    </Link>\r\n                  )}\r\n\r\n                  {(job.status === 'failed' || job.status === 'completed') && (\r\n                    <Button \r\n                      variant=\"outline\" \r\n                      onClick={() => handleDeleteJob(job)}\r\n                      className=\"text-destructive hover:text-destructive\"\r\n                    >\r\n                      <Trash2 className=\"h-4 w-4 mr-2\" />\r\n                      Delete\r\n                    </Button>\r\n                  )}\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}"],"names":["__iconNode","Scale","createLucideIcon","calculatePercentage","numerator","denominator","decimals","percentage","clamp","round","value","min","max","multiplier","ProcessingStatus","searchParams","useSearchParams","jobs","setJobs","useState","loading","setLoading","refreshing","setRefreshing","intervalRef","useRef","jobId","fetchJobs","useCallback","silent","fetchedJobs","processingService","element","toast","useEffect","pollInterval","currentJobs","job","handleDownload","blob","url","a","handleDeleteJob","j","getEstimatedTime","elapsed","estimatedTotal","remaining","formatEstimate","jsxs","jsx","_","i","Card","CardContent","Button","RefreshCw","FileText","Link","CardHeader","StatusIndicator","CardTitle","CardDescription","formatDateTime","CountdownTimer","ProgressBar","MetricCard","Users","Building2","Brain","Zap","CheckCircle","Alert","AlertCircle","AlertDescription","Download","Trash2"],"mappings":"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","x_google_ignoreList":[0]}