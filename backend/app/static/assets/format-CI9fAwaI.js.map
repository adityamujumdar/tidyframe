{"version":3,"file":"format-CI9fAwaI.js","sources":["../../src/utils/format.ts"],"sourcesContent":["/**\r\n * Format utilities for consistent data presentation\r\n * Single source of truth for all formatting operations\r\n */\r\n\r\n/**\r\n * Formats a date string to localized date-time format\r\n * @param dateString ISO date string or Date object\r\n * @param options Intl.DateTimeFormatOptions for customization\r\n * @returns Formatted date string or fallback text\r\n */\r\nexport function formatDateTime(\r\n  dateString: string | Date | null | undefined,\r\n  options?: Intl.DateTimeFormatOptions\r\n): string {\r\n  if (!dateString) return 'Unknown';\r\n\r\n  try {\r\n    const date = typeof dateString === 'string' ? new Date(dateString) : dateString;\r\n    if (isNaN(date.getTime())) return 'Invalid Date';\r\n\r\n    return date.toLocaleString(undefined, options);\r\n  } catch {\r\n    return 'Invalid Date';\r\n  }\r\n}\r\n\r\n/**\r\n * Formats a date string to localized date format only\r\n */\r\nexport function formatDate(\r\n  dateString: string | Date | null | undefined\r\n): string {\r\n  return formatDateTime(dateString, {\r\n    year: 'numeric',\r\n    month: 'short',\r\n    day: 'numeric'\r\n  });\r\n}\r\n\r\n/**\r\n * Formats a date string to localized time format only\r\n */\r\nexport function formatTime(\r\n  dateString: string | Date | null | undefined\r\n): string {\r\n  return formatDateTime(dateString, {\r\n    hour: '2-digit',\r\n    minute: '2-digit'\r\n  });\r\n}\r\n\r\n/**\r\n * Formats a number with thousand separators\r\n * @param value Number to format\r\n * @param options Intl.NumberFormatOptions for customization\r\n * @returns Formatted number string\r\n */\r\nexport function formatNumber(\r\n  value: number | null | undefined,\r\n  options?: Intl.NumberFormatOptions\r\n): string {\r\n  if (value === null || value === undefined) return '0';\r\n  if (isNaN(value)) return '0';\r\n\r\n  return new Intl.NumberFormat(undefined, options).format(value);\r\n}\r\n\r\n/**\r\n * Formats a number as a percentage\r\n * @param value Number between 0-1 or 0-100\r\n * @param decimals Number of decimal places\r\n * @param asRatio If true, expects 0-1 range; if false, expects 0-100 range\r\n * @returns Formatted percentage string\r\n */\r\nexport function formatPercent(\r\n  value: number | null | undefined,\r\n  decimals: number = 0,\r\n  asRatio: boolean = false\r\n): string {\r\n  if (value === null || value === undefined) return '0%';\r\n  if (isNaN(value)) return '0%';\r\n\r\n  const percentage = asRatio ? value * 100 : value;\r\n  return `${percentage.toFixed(decimals)}%`;\r\n}\r\n\r\n/**\r\n * Formats a number with compact notation (1K, 1M, etc.)\r\n * @param value Number to format\r\n * @returns Compact formatted string\r\n */\r\nexport function formatCompact(\r\n  value: number | null | undefined\r\n): string {\r\n  if (value === null || value === undefined) return '0';\r\n  if (isNaN(value)) return '0';\r\n\r\n  return new Intl.NumberFormat(undefined, {\r\n    notation: 'compact',\r\n    compactDisplay: 'short',\r\n    maximumFractionDigits: 1\r\n  }).format(value);\r\n}\r\n\r\n/**\r\n * Formats a file size in bytes to human-readable format\r\n * @param bytes File size in bytes\r\n * @returns Formatted file size (e.g., \"1.5 MB\")\r\n */\r\nexport function formatFileSize(bytes: number | null | undefined): string {\r\n  if (bytes === null || bytes === undefined || bytes === 0) return '0 B';\r\n  if (isNaN(bytes)) return '0 B';\r\n\r\n  const units = ['B', 'KB', 'MB', 'GB', 'TB'];\r\n  const k = 1024;\r\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n\r\n  return `${(bytes / Math.pow(k, i)).toFixed(1)} ${units[i]}`;\r\n}\r\n\r\n/**\r\n * Formats milliseconds to human-readable duration\r\n * @param ms Duration in milliseconds\r\n * @returns Formatted duration (e.g., \"2m 30s\")\r\n */\r\nexport function formatDuration(ms: number | null | undefined): string {\r\n  if (ms === null || ms === undefined || ms === 0) return '0s';\r\n  if (isNaN(ms)) return '0s';\r\n\r\n  const seconds = Math.floor(ms / 1000);\r\n  const minutes = Math.floor(seconds / 60);\r\n  const hours = Math.floor(minutes / 60);\r\n\r\n  if (hours > 0) {\r\n    return `${hours}h ${minutes % 60}m`;\r\n  } else if (minutes > 0) {\r\n    return `${minutes}m ${seconds % 60}s`;\r\n  } else {\r\n    return `${seconds}s`;\r\n  }\r\n}\r\n\r\n/**\r\n * Formats a duration estimate with contextual text\r\n * @param ms Remaining milliseconds\r\n * @returns Human-friendly estimate (e.g., \"~2 minutes remaining\")\r\n */\r\nexport function formatEstimate(ms: number | null | undefined): string {\r\n  if (ms === null || ms === undefined || ms === 0 || !isFinite(ms)) {\r\n    return 'Processing...';\r\n  }\r\n\r\n  if (ms < 60000) { // Less than 1 minute\r\n    return `~${Math.ceil(ms / 1000)}s remaining`;\r\n  } else { // 1 minute or more\r\n    return `~${Math.ceil(ms / 60000)}m remaining`;\r\n  }\r\n}\r\n\r\n/**\r\n * Formats a relative time (e.g., \"2 hours ago\", \"in 3 days\")\r\n * @param dateString ISO date string or Date object\r\n * @returns Relative time string\r\n */\r\nexport function formatRelativeTime(\r\n  dateString: string | Date | null | undefined\r\n): string {\r\n  if (!dateString) return 'Unknown';\r\n\r\n  try {\r\n    const date = typeof dateString === 'string' ? new Date(dateString) : dateString;\r\n    if (isNaN(date.getTime())) return 'Invalid Date';\r\n\r\n    const now = new Date();\r\n    const diffMs = now.getTime() - date.getTime();\r\n    const diffSecs = Math.floor(diffMs / 1000);\r\n    const diffMins = Math.floor(diffSecs / 60);\r\n    const diffHours = Math.floor(diffMins / 60);\r\n    const diffDays = Math.floor(diffHours / 24);\r\n\r\n    if (diffSecs < 60) return 'Just now';\r\n    if (diffMins < 60) return `${diffMins}m ago`;\r\n    if (diffHours < 24) return `${diffHours}h ago`;\r\n    if (diffDays < 7) return `${diffDays}d ago`;\r\n    if (diffDays < 30) return `${Math.floor(diffDays / 7)}w ago`;\r\n\r\n    return formatDate(date);\r\n  } catch {\r\n    return 'Invalid Date';\r\n  }\r\n}\r\n"],"names":["formatDateTime","dateString","options","date","formatDate","formatNumber","value","formatPercent","decimals","asRatio","formatEstimate","ms"],"mappings":"AAWO,SAASA,EACdC,EACAC,EACQ,CACR,GAAI,CAACD,EAAY,MAAO,UAExB,GAAI,CACF,MAAME,EAAO,OAAOF,GAAe,SAAW,IAAI,KAAKA,CAAU,EAAIA,EACrE,OAAI,MAAME,EAAK,QAAA,CAAS,EAAU,eAE3BA,EAAK,eAAe,OAAWD,CAAO,CAC/C,MAAQ,CACN,MAAO,cACT,CACF,CAKO,SAASE,EACdH,EACQ,CACR,OAAOD,EAAeC,EAAY,CAChC,KAAM,UACN,MAAO,QACP,IAAK,SAAA,CACN,CACH,CAoBO,SAASI,EACdC,EACAJ,EACQ,CAER,OADII,GAAU,MACV,MAAMA,CAAK,EAAU,IAElB,IAAI,KAAK,aAAa,OAAWJ,CAAO,EAAE,OAAOI,CAAK,CAC/D,CASO,SAASC,EACdD,EACAE,EAAmB,EACnBC,EAAmB,GACX,CAER,OADIH,GAAU,MACV,MAAMA,CAAK,EAAU,KAGlB,IADYG,EAAUH,EAAQ,IAAMA,GACtB,QAAQE,CAAQ,CAAC,GACxC,CA+DO,SAASE,EAAeC,EAAuC,CACpE,OAAIA,GAAO,MAA4BA,IAAO,GAAK,CAAC,SAASA,CAAE,EACtD,gBAGLA,EAAK,IACA,IAAI,KAAK,KAAKA,EAAK,GAAI,CAAC,cAExB,IAAI,KAAK,KAAKA,EAAK,GAAK,CAAC,aAEpC"}