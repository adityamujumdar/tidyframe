name: Security Scanning

# Comprehensive security scanning workflow
# Optional secrets (scans will be skipped if not configured):
#   - SNYK_TOKEN: For Snyk vulnerability scanning
#   - SONAR_TOKEN: For SonarCloud code quality analysis
#   - SECURITY_SLACK_WEBHOOK_URL: For critical security alerts

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@v3.63.2-beta
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      matrix:
        component: [frontend, backend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js (Frontend)
        if: matrix.component == 'frontend'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Setup Python (Backend)
        if: matrix.component == 'backend'
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies (Frontend)
        if: matrix.component == 'frontend'
        run: npm ci
        working-directory: ./frontend

      - name: Install dependencies (Backend)
        if: matrix.component == 'backend'
        run: pip install -r requirements.txt
        working-directory: ./backend

      - name: Run npm audit (Frontend)
        if: matrix.component == 'frontend'
        run: |
          npm audit --audit-level moderate
          npm audit --parseable | tee npm-audit-results.txt
        working-directory: ./frontend
        continue-on-error: true

      - name: Run Safety scan (Backend)
        if: matrix.component == 'backend'
        run: |
          pip install safety
          safety check --json --output safety-results.json
        working-directory: ./backend
        continue-on-error: true

      - name: Run Snyk scan
        uses: snyk/actions/node@master
        if: matrix.component == 'frontend' && secrets.SNYK_TOKEN != ''
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --file=frontend/package.json
        continue-on-error: true

      - name: Run Snyk scan (Python)
        uses: snyk/actions/python@master
        if: matrix.component == 'backend' && secrets.SNYK_TOKEN != ''
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --file=backend/requirements.txt
        continue-on-error: true

      - name: Upload vulnerability reports
        uses: actions/upload-artifact@v3
        with:
          name: vulnerability-reports-${{ matrix.component }}
          path: |
            frontend/npm-audit-results.txt
            backend/safety-results.json

  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: []
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build frontend image for scanning
        run: |
          docker build -t frontend-scan:latest ./frontend
        continue-on-error: true

      - name: Build backend image for scanning
        run: |
          docker build -t backend-scan:latest ./backend

      - name: Run Trivy vulnerability scanner (Frontend)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'frontend-scan:latest'
          format: 'sarif'
          output: 'trivy-frontend-results.sarif'
        continue-on-error: true

      - name: Run Trivy vulnerability scanner (Backend)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'backend-scan:latest'
          format: 'sarif'
          output: 'trivy-backend-results.sarif'
        continue-on-error: true

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: |
            trivy-frontend-results.sarif
            trivy-backend-results.sarif

      - name: Run Anchore Grype scan
        uses: anchore/scan-action@v3
        with:
          image: "frontend-scan:latest"
          fail-build: false
          severity-cutoff: critical

  code-quality-security:
    name: Code Quality & Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 25
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: SonarCloud Scan
        if: secrets.SONAR_TOKEN != ''
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        continue-on-error: true

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: javascript, python

      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/javascript
            p/python

  infrastructure-scan:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Checkov on Docker files
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: dockerfile
          output_format: sarif
          output_file_path: checkov-docker-results.sarif

      - name: Run Checkov on Docker Compose
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: docker_compose
          output_format: sarif
          output_file_path: checkov-compose-results.sarif

      - name: Upload Checkov scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: |
            checkov-docker-results.sarif
            checkov-compose-results.sarif

      - name: Run Hadolint on Dockerfiles
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: ./frontend/Dockerfile
          format: sarif
          output-file: hadolint-frontend-results.sarif
        continue-on-error: true

      - name: Run Hadolint on backend Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: ./backend/Dockerfile
          format: sarif
          output-file: hadolint-backend-results.sarif
        continue-on-error: true

      - name: Upload Hadolint scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: |
            hadolint-frontend-results.sarif
            hadolint-backend-results.sarif

  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [secret-scan, dependency-scan, container-scan, code-quality-security, infrastructure-scan]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Generate security report
        run: |
          mkdir -p security-reports
          
          echo "# Security Scan Report - $(date)" > security-reports/security-report.md
          echo "" >> security-reports/security-report.md
          
          echo "## Scan Results Summary" >> security-reports/security-report.md
          echo "- Secret Scan: ${{ needs.secret-scan.result }}" >> security-reports/security-report.md
          echo "- Dependency Scan: ${{ needs.dependency-scan.result }}" >> security-reports/security-report.md
          echo "- Container Scan: ${{ needs.container-scan.result }}" >> security-reports/security-report.md
          echo "- Code Quality & Security: ${{ needs.code-quality-security.result }}" >> security-reports/security-report.md
          echo "- Infrastructure Scan: ${{ needs.infrastructure-scan.result }}" >> security-reports/security-report.md
          echo "" >> security-reports/security-report.md
          
          echo "## Recommendations" >> security-reports/security-report.md
          echo "1. Review all high and critical vulnerabilities" >> security-reports/security-report.md
          echo "2. Update dependencies with known vulnerabilities" >> security-reports/security-report.md
          echo "3. Address any secrets found in the codebase" >> security-reports/security-report.md
          echo "4. Review Docker image security recommendations" >> security-reports/security-report.md
          
          # Add detailed results if available
          if [ -d "vulnerability-reports-frontend" ]; then
            echo "" >> security-reports/security-report.md
            echo "## Frontend Vulnerability Details" >> security-reports/security-report.md
            if [ -f "vulnerability-reports-frontend/npm-audit-results.txt" ]; then
              echo "\`\`\`" >> security-reports/security-report.md
              head -50 vulnerability-reports-frontend/npm-audit-results.txt >> security-reports/security-report.md
              echo "\`\`\`" >> security-reports/security-report.md
            fi
          fi
          
          if [ -d "vulnerability-reports-backend" ]; then
            echo "" >> security-reports/security-report.md
            echo "## Backend Vulnerability Details" >> security-reports/security-report.md
            if [ -f "vulnerability-reports-backend/safety-results.json" ]; then
              echo "\`\`\`json" >> security-reports/security-report.md
              head -50 vulnerability-reports-backend/safety-results.json >> security-reports/security-report.md
              echo "\`\`\`" >> security-reports/security-report.md
            fi
          fi

      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: security-reports/

      - name: Comment security report on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const reportPath = 'security-reports/security-report.md';
            
            if (fs.existsSync(reportPath)) {
              const report = fs.readFileSync(reportPath, 'utf8');
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## 🔒 Security Scan Results\n\n${report}`
              });
            }

      - name: Notify security team on critical findings
        if: |
          (needs.secret-scan.result == 'failure' || needs.container-scan.result == 'failure') &&
          secrets.SECURITY_SLACK_WEBHOOK_URL != ''
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#security-alerts'
          text: '🚨 Critical security vulnerabilities found in ${{ github.repository }}'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SECURITY_SLACK_WEBHOOK_URL }}
        continue-on-error: true