name: Continuous Deployment

on:
  workflow_run:
    workflows: ["Continuous Integration"]
    types:
      - completed
    branches:
      - main

jobs:
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'main'
    environment:
      name: production
      url: https://tidyframe.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Deploy to production server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PROD_SERVER_HOST }}
          username: ${{ secrets.PROD_SERVER_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          script: |
            cd /opt/tidyframe

            # Pull latest code
            git fetch origin
            git reset --hard origin/main

            # Stop existing backend to release env file
            docker-compose -f docker-compose.prod.yml stop backend
            docker rm tidyframe_backend_1 || true

            # Ensure critical env vars are set
            if ! grep -q "FRONTEND_URL" .env; then
              echo "FRONTEND_URL=https://tidyframe.com" >> .env
            fi

            # Start all services
            docker-compose -f docker-compose.prod.yml up -d

            echo "Deployment completed"

      - name: Wait for deployment
        run: sleep 30

      - name: Health check
        run: |
          echo "Running health checks..."

          # Check main health endpoint
          if curl -f -s https://tidyframe.com/health; then
            echo "‚úÖ Main health check passed"
          else
            echo "‚ùå Main health check failed"
            exit 1
          fi

          # Check frontend loads
          if curl -f -s https://tidyframe.com/ | grep -q "TidyFrame"; then
            echo "‚úÖ Frontend loads correctly"
          else
            echo "‚ùå Frontend failed to load"
            exit 1
          fi

      - name: Run smoke tests
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PROD_SERVER_HOST }}
          username: ${{ secrets.PROD_SERVER_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          script: |
            cd /opt/tidyframe
            bash backend/scripts/smoke-test.sh || echo "Smoke tests completed with warnings"

      - name: Deployment notification
        if: success()
        run: |
          echo "üöÄ Deployment successful!"
          echo "Version: $(git describe --tags --always)"
          echo "Commit: ${{ github.sha }}"
          echo "URL: https://tidyframe.com"

  rollback-on-failure:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: deploy-production
    if: failure()

    steps:
      - name: Rollback deployment
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PROD_SERVER_HOST }}
          username: ${{ secrets.PROD_SERVER_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          script: |
            cd /opt/tidyframe

            # Get previous commit
            PREVIOUS_COMMIT=$(git rev-parse HEAD~1)

            echo "Rolling back to commit: $PREVIOUS_COMMIT"
            git reset --hard $PREVIOUS_COMMIT

            # Restart services
            docker-compose -f docker-compose.prod.yml down
            docker-compose -f docker-compose.prod.yml up -d

            echo "Rollback completed"

      - name: Rollback notification
        run: |
          echo "‚ö†Ô∏è Deployment failed and was rolled back"
          echo "Previous commit restored"
          echo "Manual investigation required"
