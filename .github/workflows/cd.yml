name: Continuous Deployment

on:
  workflow_run:
    workflows: ["Continuous Integration"]
    types:
      - completed
    branches:
      - main
  # Allow manual deployments for hotfixes
  workflow_dispatch:
    inputs:
      skip_health_checks:
        description: 'Skip health checks (emergency only)'
        required: false
        default: 'false'
        type: choice
        options:
          - 'false'
          - 'true'

jobs:
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'workflow_run' && github.event.workflow_run.head_branch == 'main') ||
      github.event_name == 'workflow_dispatch'
    environment:
      name: production
      url: https://tidyframe.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Download frontend build artifacts
        uses: dawidd6/action-download-artifact@v3
        with:
          workflow: ci.yml
          workflow_conclusion: success
          name: frontend-build
          path: frontend/dist
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Copy frontend build to backend static directory
        run: |
          echo "📦 Copying frontend build to backend static directory..."
          mkdir -p backend/app/static
          rm -rf backend/app/static/*
          cp -r frontend/dist/* backend/app/static/
          ls -lah backend/app/static/
          echo "✅ Frontend build copied successfully"

      - name: Transfer frontend build to production server
        run: |
          echo "🚀 Transferring frontend build to production..."
          # Create tarball of static files
          tar -czf static-files.tar.gz -C backend/app/static .

          # Transfer to production server
          echo "${{ secrets.PROD_SSH_KEY }}" > /tmp/ssh_key
          chmod 600 /tmp/ssh_key

          scp -i /tmp/ssh_key -o StrictHostKeyChecking=no \
            static-files.tar.gz \
            ${{ secrets.PROD_SERVER_USER }}@${{ secrets.PROD_SERVER_HOST }}:/tmp/

          rm /tmp/ssh_key
          echo "✅ Static files transferred to production"

      - name: Validate environment and backup
        id: pre_deploy
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PROD_SERVER_HOST }}
          username: ${{ secrets.PROD_SERVER_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          script: |
            cd /opt/tidyframe

            echo "📋 Pre-deployment checks..."

            # Store current commit for potential rollback
            CURRENT_COMMIT=$(git rev-parse HEAD)
            echo "current_commit=$CURRENT_COMMIT" >> deployment.state

            # Validate environment file exists
            if [ ! -f ".env" ]; then
              echo "❌ ERROR: .env file not found"
              exit 1
            fi

            # Check critical environment variables
            REQUIRED_VARS="POSTGRES_PASSWORD DATABASE_URL REDIS_PASSWORD SECRET_KEY GEMINI_API_KEY"
            for var in $REQUIRED_VARS; do
              if ! grep -q "^$var=" .env; then
                echo "❌ ERROR: Required environment variable $var not found in .env"
                exit 1
              fi
            done

            # Ensure FRONTEND_URL is set correctly
            if grep -q "FRONTEND_URL=http://localhost" .env; then
              echo "⚠️  WARNING: FRONTEND_URL uses localhost, fixing..."
              sed -i 's|FRONTEND_URL=http://localhost:3000|FRONTEND_URL=https://tidyframe.com|g' .env
            fi

            if ! grep -q "^FRONTEND_URL=" .env; then
              echo "FRONTEND_URL=https://tidyframe.com" >> .env
            fi

            # Backup database (keep last 3 backups)
            echo "💾 Creating database backup..."
            mkdir -p backups
            BACKUP_FILE="backups/db-backup-$(date +%Y%m%d-%H%M%S).sql"
            docker compose -f docker-compose.prod.yml exec -T postgres pg_dump -U tidyframe tidyframe > "$BACKUP_FILE" || echo "⚠️  Database backup failed (non-critical)"

            # Cleanup old backups (keep last 3)
            ls -t backups/db-backup-*.sql 2>/dev/null | tail -n +4 | xargs -r rm

            echo "✅ Pre-deployment validation complete"

      - name: Deploy to production server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PROD_SERVER_HOST }}
          username: ${{ secrets.PROD_SERVER_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          script: |
            cd /opt/tidyframe

            echo "🚀 Starting deployment..."

            # Pull latest code
            echo "📥 Pulling latest changes..."
            git fetch origin
            git reset --hard origin/main

            echo "📦 Current version: $(git describe --tags --always)"
            echo "📝 Latest commit: $(git log -1 --oneline)"

            # Extract frontend build artifacts
            echo "📦 Extracting frontend build artifacts..."
            if [ -f "/tmp/static-files.tar.gz" ]; then
              mkdir -p backend/app/static
              rm -rf backend/app/static/*
              tar -xzf /tmp/static-files.tar.gz -C backend/app/static/
              rm /tmp/static-files.tar.gz
              echo "✅ Frontend build extracted to backend/app/static/"
              ls -lah backend/app/static/ | head -10
            else
              echo "⚠️  Warning: No frontend build artifacts found (using git-committed static files)"
            fi

            # Run zero-downtime deployment script
            echo "🔄 Running zero-downtime deployment..."
            bash backend/scripts/zero-downtime-deploy.sh docker-compose.prod.yml backend celery-worker celery-beat

      - name: Wait for services to stabilize
        run: sleep 30

      - name: Health check
        if: inputs.skip_health_checks != 'true'
        run: |
          echo "🏥 Running health checks..."

          MAX_ATTEMPTS=10
          ATTEMPT=0

          # Health check with retry logic
          while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
            ATTEMPT=$((ATTEMPT + 1))
            echo "Attempt $ATTEMPT/$MAX_ATTEMPTS..."

            # Check main health endpoint
            if curl -f -s -m 10 https://tidyframe.com/health > /dev/null 2>&1; then
              echo "✅ Health endpoint responsive"

              # Check API is responding
              API_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://tidyframe.com/api/health 2>/dev/null)
              if [ "$API_STATUS" = "200" ] || [ "$API_STATUS" = "401" ]; then
                echo "✅ API responding (status: $API_STATUS)"

                # Check frontend loads
                if curl -f -s -m 10 https://tidyframe.com/ | grep -q "tidyframe\|TidyFrame\|root"; then
                  echo "✅ Frontend loads correctly"
                  echo "🎉 All health checks passed!"
                  exit 0
                fi
              fi
            fi

            if [ $ATTEMPT -lt $MAX_ATTEMPTS ]; then
              echo "⏳ Waiting 10s before retry..."
              sleep 10
            fi
          done

          echo "❌ Health checks failed after $MAX_ATTEMPTS attempts"
          exit 1

      - name: Run smoke tests
        if: inputs.skip_health_checks != 'true'
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PROD_SERVER_HOST }}
          username: ${{ secrets.PROD_SERVER_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          script: |
            cd /opt/tidyframe

            echo "🧪 Running smoke tests..."

            # Run comprehensive smoke tests
            if bash backend/scripts/smoke-test.sh tidyframe.com docker-compose.prod.yml; then
              echo "✅ Smoke tests passed"
            else
              echo "⚠️  Smoke tests completed with warnings (non-critical)"
            fi

      - name: Verify container health
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PROD_SERVER_HOST }}
          username: ${{ secrets.PROD_SERVER_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          script: |
            cd /opt/tidyframe

            echo "🐳 Checking container status..."
            docker compose -f docker-compose.prod.yml ps

            # Check all required services are healthy
            REQUIRED_SERVICES="backend nginx postgres redis celery-worker celery-beat"
            UNHEALTHY=""

            for service in $REQUIRED_SERVICES; do
              STATUS=$(docker compose -f docker-compose.prod.yml ps $service --format json | jq -r '.[0].Health // "unknown"')
              if [ "$STATUS" = "healthy" ] || [ "$STATUS" = "unknown" ]; then
                echo "✅ $service is running"
              else
                echo "❌ $service is unhealthy"
                UNHEALTHY="$UNHEALTHY $service"
              fi
            done

            if [ -n "$UNHEALTHY" ]; then
              echo "⚠️  Warning: Some services are unhealthy:$UNHEALTHY"
              echo "This may resolve automatically. Check logs with: docker compose -f docker-compose.prod.yml logs $UNHEALTHY"
            fi

      - name: Deployment notification
        if: success()
        run: |
          echo "🎉 ====================================="
          echo "🚀 Deployment successful!"
          echo "====================================="
          echo "📦 Version: $(git describe --tags --always 2>/dev/null || echo 'unknown')"
          echo "📝 Commit: ${{ github.sha }}"
          echo "🌐 URL: https://tidyframe.com"
          echo "⏱️  Deployed at: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
          echo "✅ All health checks passed"
          echo "====================================="

  rollback-on-failure:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: deploy-production
    if: failure()

    steps:
      - name: Intelligent rollback
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PROD_SERVER_HOST }}
          username: ${{ secrets.PROD_SERVER_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          script: |
            cd /opt/tidyframe

            echo "🔄 ====================================="
            echo "⚠️  ROLLBACK INITIATED"
            echo "====================================="

            # Read previous commit from deployment state
            if [ -f "deployment.state" ]; then
              PREVIOUS_COMMIT=$(grep "current_commit=" deployment.state | cut -d= -f2)
              echo "📌 Rolling back to commit: $PREVIOUS_COMMIT"
            else
              PREVIOUS_COMMIT=$(git rev-parse HEAD~1)
              echo "📌 No deployment state found, using previous commit: $PREVIOUS_COMMIT"
            fi

            # Restore previous code
            git fetch origin
            git reset --hard $PREVIOUS_COMMIT

            echo "🔨 Rebuilding previous version..."
            docker compose -f docker-compose.prod.yml build --no-cache backend celery-worker celery-beat

            echo "🔄 Restarting services..."
            docker compose -f docker-compose.prod.yml up -d --force-recreate --no-deps backend celery-worker celery-beat

            echo "⏳ Waiting for services..."
            sleep 20

            # Verify rollback succeeded
            if docker compose -f docker-compose.prod.yml ps | grep -q "backend.*Up"; then
              echo "✅ Rollback successful - services are running"
            else
              echo "❌ Rollback failed - manual intervention required!"
              docker compose -f docker-compose.prod.yml ps
              exit 1
            fi

            echo "====================================="
            echo "✅ Rollback completed"
            echo "====================================="

      - name: Rollback notification
        run: |
          echo "⚠️  ====================================="
          echo "🔄 DEPLOYMENT FAILED - ROLLBACK EXECUTED"
          echo "====================================="
          echo "❌ Deployment to production failed"
          echo "✅ System rolled back to previous version"
          echo "🔍 Manual investigation required"
          echo "📋 Check logs: docker compose -f docker-compose.prod.yml logs"
          echo "====================================="
