services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: tidyframe
      POSTGRES_USER: tidyframe
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tidyframe"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Redis Cache and Message Broker
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # FastAPI Backend Application
  backend:
    build: ./backend
    volumes:
      - ./backend/app:/app/app  # Mount source code for development
      - ./backend/uploads:/app/uploads
      - ./backend/results:/app/results
      - ./backend/logs:/app/logs
    env_file:
      - ${ENV_FILE:-.env}
    environment:
      # Database
      DATABASE_URL: postgresql+asyncpg://tidyframe:${POSTGRES_PASSWORD:-password}@postgres:5432/tidyframe
      
      # Redis
      REDIS_URL: redis://redis:6379/0
      CELERY_BROKER_URL: redis://redis:6379/1
      CELERY_RESULT_BACKEND: redis://redis:6379/2
      
      # Application
      ENVIRONMENT: ${ENVIRONMENT:-development}
      SECRET_KEY: ${SECRET_KEY:-your-super-secret-key-change-in-production}
      DEBUG: ${DEBUG:-true}
      
      # Site Password Protection
      ENABLE_SITE_PASSWORD: ${ENABLE_SITE_PASSWORD:-true}
      SITE_PASSWORD: ${SITE_PASSWORD:-Yeet@550099}
      
      # Token Expiration Settings (Production Ready)
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES:-1440}  # 24 hours
      REFRESH_TOKEN_EXPIRE_MINUTES: ${REFRESH_TOKEN_EXPIRE_MINUTES:-43200}  # 30 days
      
      # External APIs - loaded from env_file, don't override
      # GEMINI_API_KEY: ${GEMINI_API_KEY}
      GEMINI_MODEL: ${GEMINI_MODEL:-gemini-2.5-flash-lite}
      # These are loaded from env_file - don't override
      # GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      # GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      # STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      # STRIPE_PUBLISHABLE_KEY: ${STRIPE_PUBLISHABLE_KEY}
      # STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
      # RESEND_API_KEY: ${RESEND_API_KEY}
      
      # File processing
      UPLOAD_DIR: /app/uploads
      RESULTS_DIR: /app/results
      MAX_FILE_SIZE_MB: ${MAX_FILE_SIZE_MB:-200}
      
      # Data Retention (hours)
      ANONYMOUS_DATA_RETENTION_HOURS: ${ANONYMOUS_DATA_RETENTION_HOURS:-1}
      STANDARD_DATA_RETENTION_HOURS: ${STANDARD_DATA_RETENTION_HOURS:-24}
      ENTERPRISE_DATA_RETENTION_HOURS: ${ENTERPRISE_DATA_RETENTION_HOURS:-720}
      
      # Plan Limits
      STANDARD_TIER_MONTHLY_LIMIT: ${STANDARD_TIER_MONTHLY_LIMIT:-100000}
      ENTERPRISE_TIER_MONTHLY_LIMIT: ${ENTERPRISE_TIER_MONTHLY_LIMIT:-10000000}
      ANONYMOUS_LIFETIME_LIMIT: ${ANONYMOUS_LIFETIME_LIMIT:-5}
      
      # CORS
      ALLOWED_HOSTS_STR: ${ALLOWED_HOSTS_STR:-localhost,127.0.0.1,0.0.0.0}
    
    ports:
      - "8000:8000"
    
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    
    restart: unless-stopped

  # Celery Worker for Background Tasks
  celery-worker:
    build: ./backend
    command: celery -A app.core.celery_app worker --loglevel=info --concurrency=2
    environment:
      # Database
      DATABASE_URL: postgresql+asyncpg://tidyframe:${POSTGRES_PASSWORD:-password}@postgres:5432/tidyframe
      
      # Redis
      REDIS_URL: redis://redis:6379/0
      CELERY_BROKER_URL: redis://redis:6379/1
      CELERY_RESULT_BACKEND: redis://redis:6379/2
      
      # Application
      ENVIRONMENT: ${ENVIRONMENT:-development}
      SECRET_KEY: ${SECRET_KEY:-your-super-secret-key-change-in-production}
      
      # External APIs
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      GEMINI_MODEL: ${GEMINI_MODEL:-gemini-2.5-flash-lite}
      RESEND_API_KEY: ${RESEND_API_KEY}
      
      # File processing
      UPLOAD_DIR: /app/uploads
      RESULTS_DIR: /app/results
    
    volumes:
      - ./backend/app:/app/app  # Mount source code for hot reload
      - ./backend/uploads:/app/uploads
      - ./backend/results:/app/results
      - ./backend/logs:/app/logs
    
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    
    healthcheck:
      test: ["CMD", "celery", "-A", "app.core.celery_app", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    
    restart: unless-stopped

  # Celery Beat Scheduler
  celery-beat:
    build: ./backend
    command: celery -A app.core.celery_app beat --loglevel=info
    environment:
      # Database
      DATABASE_URL: postgresql+asyncpg://tidyframe:${POSTGRES_PASSWORD:-password}@postgres:5432/tidyframe
      
      # Redis
      REDIS_URL: redis://redis:6379/0
      CELERY_BROKER_URL: redis://redis:6379/1
      CELERY_RESULT_BACKEND: redis://redis:6379/2
      
      # Application
      ENVIRONMENT: ${ENVIRONMENT:-development}
      SECRET_KEY: ${SECRET_KEY:-your-super-secret-key-change-in-production}
    
    volumes:
      - ./backend/logs:/app/logs
    
    depends_on:
      redis:
        condition: service_healthy
    
    healthcheck:
      test: ["CMD", "python", "-c", "import os, time; exit(0 if os.path.exists('/app/celerybeat-schedule') and (time.time() - os.path.getmtime('/app/celerybeat-schedule') < 300) else 1)"]
      interval: 60s
      timeout: 20s
      retries: 5
      start_period: 30s
    
    restart: unless-stopped

  # Flower - Celery Monitoring
  flower:
    build: ./backend
    command: celery -A app.core.celery_app flower --port=5555
    ports:
      - "5555:5555"
    environment:
      CELERY_BROKER_URL: redis://redis:6379/1
      CELERY_RESULT_BACKEND: redis://redis:6379/2
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5555/"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # React Frontend Application (Development with hot reload)
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    ports:
      - "3001:3000"
    environment:
      VITE_API_URL: ${VITE_API_URL:-http://backend:8000}
      VITE_BACKEND_URL: http://backend:8000
      VITE_STRIPE_PUBLISHABLE_KEY: ${STRIPE_PUBLISHABLE_KEY}
      VITE_SITE_PASSWORD: ${SITE_PASSWORD}
    depends_on:
      - backend
    restart: unless-stopped
    volumes:
      - ./frontend:/app
      - /app/node_modules

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d/tidyframe-local.conf:/etc/nginx/conf.d/default.conf:ro
      - ./logs/nginx:/var/log/nginx
      - ./frontend/dist:/usr/share/nginx/html:ro
    depends_on:
      - backend
      - frontend
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    environment:
      - NGINX_ENVSUBST_OUTPUT_DIR=/etc/nginx/conf.d

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    name: tidyframe-network